[{"/Users/tuannguyenanh/workspace/blockchain/my-wallet/.eslintrc.js":"1","/Users/tuannguyenanh/workspace/blockchain/my-wallet/commitlint.config.js":"2","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/_locales/index.js":"3","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/containers/LanguageProvider/index.js":"4","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/i18n.js":"5","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Background/index.js":"6","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Content/index.js":"7","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Content/modules/print.js":"8","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Devtools/index.js":"9","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Popup/helpers/utils/popupMessages.js":"10","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/background.js":"11","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/extractEthjsErrorMessage.js":"12","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/setupSentry.js":"13","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/utils.js":"14","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/platforms/extension.js":"15","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/platforms/extension.test.js":"16","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/sentry-install.js":"17","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/wallet-controller.js":"18","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/shared/constants/app.js":"19","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/shared/constants/transactions.js":"20","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/env.js":"21","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/setup.js":"22","/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/build.js":"23","/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/env.js":"24","/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/webserver.js":"25","/Users/tuannguyenanh/workspace/blockchain/my-wallet/webpack.config.js":"26","/Users/tuannguyenanh/workspace/blockchain/my-wallet/jest.config.js":"27","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/helpers/protect-intrinsics-helpers.js":"28","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/helpers/setup-helper.js":"29"},{"size":350,"mtime":1641118653750,"results":"30","hashOfConfig":"31"},{"size":67,"mtime":1641118653965,"results":"32","hashOfConfig":"31"},{"size":204,"mtime":1641118655963,"results":"33","hashOfConfig":"31"},{"size":36,"mtime":1641118656336,"results":"34","hashOfConfig":"31"},{"size":963,"mtime":1641118656430,"results":"35","hashOfConfig":"31"},{"size":94,"mtime":1640921424274,"results":"36","hashOfConfig":"31"},{"size":149,"mtime":1641118656789,"results":"37","hashOfConfig":"31"},{"size":92,"mtime":1640506212815,"results":"38","hashOfConfig":"31"},{"size":121,"mtime":1640506212815,"results":"39","hashOfConfig":"31"},{"size":436,"mtime":1641118657549,"results":"40","hashOfConfig":"31"},{"size":7414,"mtime":1641118657912,"results":"41","hashOfConfig":"31"},{"size":1625,"mtime":1641118657975,"results":"42","hashOfConfig":"31"},{"size":1313,"mtime":1641118658027,"results":"43","hashOfConfig":"31"},{"size":565,"mtime":1641118658048,"results":"44","hashOfConfig":"31"},{"size":8722,"mtime":1641118658219,"results":"45","hashOfConfig":"31"},{"size":238,"mtime":1641120320417,"results":"46","hashOfConfig":"31"},{"size":211,"mtime":1640681189881,"results":"47","hashOfConfig":"31"},{"size":34204,"mtime":1641118658752,"results":"48","hashOfConfig":"31"},{"size":1805,"mtime":1641118658794,"results":"49","hashOfConfig":"31"},{"size":5827,"mtime":1641118658942,"results":"50","hashOfConfig":"31"},{"size":35,"mtime":1641118658966,"results":"51","hashOfConfig":"31"},{"size":156,"mtime":1641117737372,"results":"52","hashOfConfig":"31"},{"size":392,"mtime":1640506212824,"results":"53","hashOfConfig":"31"},{"size":145,"mtime":1640506212825,"results":"54","hashOfConfig":"31"},{"size":1494,"mtime":1640506212825,"results":"55","hashOfConfig":"31"},{"size":5406,"mtime":1640921364709,"results":"56","hashOfConfig":"31"},{"size":1414,"mtime":1641120266276,"results":"57","hashOfConfig":"31"},{"size":2228,"mtime":1641120855767,"results":"58","hashOfConfig":"31"},{"size":2232,"mtime":1641120855774,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"woch47",{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":7,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":1,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":7,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":83,"fatalErrorCount":0,"warningCount":147,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tuannguyenanh/workspace/blockchain/my-wallet/.eslintrc.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/commitlint.config.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/_locales/index.js",["130"],"export default [\n  { code: 'en', name: 'English', lang: 'English' },\n  { code: 'vi', name: 'Tiếng Việt', lang: 'Tiếng Việt' },\n  { code: 'zh', name: '中文(简体)', lang: '中文(简体)' },\n];\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/containers/LanguageProvider/index.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/i18n.js",["131","132","133","134"],"/**\n * i18n.js\n *\n * This contains react-intl initializaion\n *\n * exports AppLocaleList, translatedMessages, DEFAULT_LOCALE\n */\n\nconst AppLocaleList = require('./_locales/index');\n\n// Deprecated when upgrade to react-int >= v3\n/*\nconst addLocaleData = require('react-intl').addLocaleData; \n\nconst en = require('react-intl/locale-data/en');\nconst vi = require('react-intl/locale-data/vi');\nconst zh = require('react-intl/locale-data/zh');\n\naddLocaleData(en);\naddLocaleData(vi);\naddLocaleData(zh);\n\n*/\n\nconst enTranslationMessages = require('./_locales/en/messages.json');\nconst viTranslationMessages = require('./_locales/vi/messages.json');\nconst zhTranslationMessages = require('./_locales/zh/messages.json');\n\nconst translatedMessages = {\n  en: enTranslationMessages,\n  vi: viTranslationMessages,\n  zh: zhTranslationMessages,\n};\n\nconst DEFAULT_LOCALE = navigator.language.match(/^[A-Za-z]{2}/)[0];\n\nexport { AppLocaleList, translatedMessages, DEFAULT_LOCALE };\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Background/index.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Content/index.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Content/modules/print.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Devtools/index.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/pages/Popup/helpers/utils/popupMessages.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/background.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"/**\n * @file The entry point for the web extension singleton process.\n */\n\nimport log from 'loglevel';\nimport extension from 'extensionizer';\n\nconst { sentry } = global;\nconst firstTimeState = { ...rawFirstTimeState };\n\nlog.setDefaultLevel(process.env.WALLET_DEBUG ? 'debug' : 'info');\n\nconst platform = new ExtensionPlatform();\n\n// include notification Manager - still developing\n// const notificationManager = new NotificationManager();\n// global.Wallet_NOTIFIER = notificationManager;\n\n// state persistence\nconst inTest = process.env.IN_TEST;\n// include store - on developing\n// const localStore = inTest ? new ReadOnlyNetworkStore() : new LocalStore();\nlet versionedData;\n// uncomment if -localStore is developed\n// if (inTest || process.env.WALLET_DEBUG) {\n//     global.WalletGetState = localStore.get.bind(localStore);\n// }\n\nlet popupIsOpen = false;\nlet notificationIsOpen = false;\nlet uiIsTriggering = false;\nconst openWalletTabsIDs = {};\nconst requestAccountTabIds = {};\n\n// initialization flow\ninitialize().catch(log.error);\n\n/**\n * @typedef {import('../../shared/constants/transaction').TransactionMeta} TransactionMeta\n */\n\n/**\n * The data emitted from the WalletController.store EventEmitter, also used to initialize the WalletController. Available in UI on React state as state.Wallet.\n * @typedef WalletState\n * @property {boolean} isInitialized - Whether the first vault has been created.\n * @property {boolean} isUnlocked - Whether the vault is currently decrypted and accounts are available for selection.\n * @property {boolean} isAccountMenuOpen - Represents whether the main account selection UI is currently displayed.\n * @property {Object} identities - An object matching lower-case hex addresses to Identity objects with \"address\" and \"name\" (nickname) keys.\n * @property {Object} unapprovedTxs - An object mapping transaction hashes to unapproved transactions.\n * @property {Array} frequentRpcList - A list of frequently used RPCs, including custom user-provided ones.\n * @property {Array} addressBook - A list of previously sent to addresses.\n * @property {Object} contractExchangeRates - Info about current token prices.\n * @property {Array} tokens - Tokens held by the current user, including their balances.\n * @property {Object} send - TODO: Document\n * @property {boolean} useBlockie - Indicates preferred user identicon format. True for blockie, false for Jazzicon.\n * @property {Object} featureFlags - An object for optional feature flags.\n * @property {boolean} welcomeScreen - True if welcome screen should be shown.\n * @property {string} currentLocale - A locale string matching the user's preferred display language.\n * @property {Object} provider - The current selected network provider.\n * @property {string} provider.rpcUrl - The address for the RPC API, if using an RPC API.\n * @property {string} provider.type - An identifier for the type of network selected, allows Wallet to use custom provider strategies for known networks.\n * @property {string} network - A stringified number of the current network ID.\n * @property {Object} accounts - An object mapping lower-case hex addresses to objects with \"balance\" and \"address\" keys, both storing hex string values.\n * @property {hex} currentBlockGasLimit - The most recently seen block gas limit, in a lower case hex prefixed string.\n * @property {TransactionMeta[]} currentNetworkTxList - An array of transactions associated with the currently selected network.\n * @property {Object} unapprovedMsgs - An object of messages pending approval, mapping a unique ID to the options.\n * @property {number} unapprovedMsgCount - The number of messages in unapprovedMsgs.\n * @property {Object} unapprovedPersonalMsgs - An object of messages pending approval, mapping a unique ID to the options.\n * @property {number} unapprovedPersonalMsgCount - The number of messages in unapprovedPersonalMsgs.\n * @property {Object} unapprovedEncryptionPublicKeyMsgs - An object of messages pending approval, mapping a unique ID to the options.\n * @property {number} unapprovedEncryptionPublicKeyMsgCount - The number of messages in EncryptionPublicKeyMsgs.\n * @property {Object} unapprovedDecryptMsgs - An object of messages pending approval, mapping a unique ID to the options.\n * @property {number} unapprovedDecryptMsgCount - The number of messages in unapprovedDecryptMsgs.\n * @property {Object} unapprovedTypedMsgs - An object of messages pending approval, mapping a unique ID to the options.\n * @property {number} unapprovedTypedMsgCount - The number of messages in unapprovedTypedMsgs.\n * @property {number} pendingApprovalCount - The number of pending request in the approval controller.\n * @property {string[]} keyringTypes - An array of unique keyring identifying strings, representing available strategies for creating accounts.\n * @property {Keyring[]} keyrings - An array of keyring descriptions, summarizing the accounts that are available for use, and what keyrings they belong to.\n * @property {string} selectedAddress - A lower case hex string of the currently selected address.\n * @property {string} currentCurrency - A string identifying the user's preferred display currency, for use in showing conversion rates.\n * @property {number} conversionRate - A number representing the current exchange rate from the user's preferred currency to Ether.\n * @property {number} conversionDate - A unix epoch date (ms) for the time the current conversion rate was last retrieved.\n * @property {boolean} forgottenPassword - Returns true if the user has initiated the password recovery screen, is recovering from seed phrase.\n */\n\n/**\n * @typedef VersionedData\n * @property {WalletState} data - The data emitted from Wallet controller, or used to initialize it.\n * @property {Number} version - The latest migration version that has been run.\n */\n\n/**\n * Initializes the Wallet controller, and sets up all platform configuration.\n * @returns {Promise} Setup complete.\n */\nasync function initialize() {}\n\n/**\n * Loads any stored data, prioritizing the latest storage strategy.\n * Migrates that data schema in case it was last loaded on an older version.\n * @returns {Promise<WalletState>} Last data emitted from previous instance of Wallet.\n */\nasync function loadStateFromPersistence() {}\n\n/**\n * Initializes the Wallet Controller with any initial state and default language.\n * Configures platform-specific error reporting strategy.\n * Streams emitted state updates to platform-specific storage strategy.\n * Creates platform listeners for new Dapps/Contexts, and sets up their data connections to the controller.\n *\n * @param {Object} initState - The initial state to start the controller with, matches the state that is emitted from the controller.\n * @param {string} initLangCode - The region code for the language preferred by the current user.\n * @returns {Promise} After setup is complete.\n */\nfunction setupController(initState, initLangCode) {}\n\n/**\n * Opens the browser popup for user confirmation\n */\nasync function triggerUi() {}\n\n/**\n * Opens the browser popup for user confirmation of watchAsset\n * then it waits until user interact with the UI\n */\nasync function openPopup() {}\n\n// On first install, open a new tab with Wallet\nextension.runtime.onInstalled.addListener(({ reason }) => {\n  if (\n    reason === 'install' &&\n    !(process.env.WALLET_DEBUG || process.env.IN_TEST)\n  ) {\n    platform.openExtensionInBrowser();\n  }\n});\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/extractEthjsErrorMessage.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/setupSentry.js",["157","158","159","160","161","162","163","164","165","166","167","168"],"import * as Sentry from '@sentry/browser';\nimport { Dedupe, ExtraErrorData } from '@sentry/integrations';\n\nimport { BuildType } from '../../../shared/constants/app';\nimport extractEthjsErrorMessage from './extractEthjsErrorMessage';\n\n// Destructuring breaks the inlining of the environment variables\nconst WALLET_DEBUG = process.env.WALLET_DEBUG;\nconst WALLET_ENVIRONMENT = process.env.WALLET_ENVIRONMENT;\nconst SENTRY_DSN_DEV = process.env.SENTRY_DSN_DEV;\nconst WALLET_BUILD_TYPE = process.env.WALLET_BUILD_TYPE;\n\n/**\n * Describe subset of Redux state attached to errors to push to sentry and\n * don't include any identifiable information\n */\nexport const SENTRY_ENTRY = {\n  gas: true,\n  history: true,\n  wallet: {\n    alertEnabledness: true,\n    conversionDate: true,\n    conversionRate: true,\n    currentBlockGasLimit: true,\n    currentCurrency: true,\n    currentLocale: true,\n    customNonceValue: true,\n    isInitialized: true,\n    isUnlocked: true,\n    network: true,\n    provider: {\n      nickname: true,\n      ticker: true,\n      type: true,\n    },\n    seedPhraseBackedUp: true,\n    showRestorePrompt: true,\n    useBlockie: true,\n    useNonceField: true,\n    usePhishDetect: true,\n    welcomeScreenSeen: true,\n  },\n  unconnectedAccount: true,\n};\n\nexport default function setupSentry(release, getState) {}\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/lib/utils.js",["169","170"],"/**\n * Return an Error if extension.runtime.lastError is present\n * this is a workaround for non-standard error object thats used\n * @returns {Error|undefined}\n */\nexport function checkForError() {\n  // get id and lastError properties from extension.runtime\n  const { id, lastError } = extension.runtime;\n  if (!lastError) {\n    return undefined;\n  }\n  // return error like ,if exist it Error\n  if (lastError.stack && lastError.message) {\n    return lastError;\n  }\n  // incomplete error object, repair it ( eg chromium v77)\n  return new Error(lastError.message);\n}\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/platforms/extension.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"/**\n * @file handler actionable option cross flatform to web browser\n */\nimport extension from 'extensionizer';\nimport { checkForError } from '../lib/utils';\nimport { ENVIRONMENT_TYPE_BACKGROUND } from '../../shared/constants/app';\nimport { TRANSACTION_STATUSES } from '../../shared/constants/transactions';\n\nexport default class ExtensionPlatform {\n  //\n  // Public\n  //\n  reload() {\n    extension.runtime.reload();\n  }\n\n  /**\n   * open a new tab on current browser windows\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/\n   * @param {\n   * active?,\n   * cookieStoreId?,\n   * discarded?,\n   * index?,\n   * openerTabId?,\n   * openInReaderMode?,\n   * pinned?,\n   * selected?,\n   * title?,\n   * url?,\n   * windowId?\n   * } options  is an object of param\n   * @returns Promise of Tab object contain detail about created tab\n   */\n  openTab(options) {\n    return new Promise((resolve, reject) => {\n      extension.tabs.create(options, (newTab) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(newTab);\n      });\n    });\n  }\n\n  /**\n   * open a new windows\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/create\n   * @param {\n   * allowScriptsToClose?,\n   * cookieStoreId?,\n   * focused?,\n   * height?,\n   * incognito?,\n   * left?,\n   * state?,\n   * tabId?,\n   * titlePreface?,\n   * top?,\n   * type?,\n   * width?\n   * } options is an object of param\n   * @returns  Promise of Window object contain detail about created window\n   */\n  openWindow(options) {\n    return new Promise((resolve, reject) => {\n      extension.windows.create(options, (newWindow) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(newWindow);\n      });\n    });\n  }\n\n  /**\n   * focus on a opened window\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/update\n   * @param windowId integer, id of created windows\n   * @returns Promise of Window object\n   */\n  focusWindow(windowId) {\n    return new Promise((resolve, reject) => {\n      extension.windows.update(windowId, { focused: true }, () => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Change opened window position\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/update\n   * @param windowId integer - id of created windows\n   * @param left integer, - offset from the left edge of the screen\n   * @param top integer, - offset from the top edge of the screen\n   * @returns Promise of Window object\n   */\n  updateWindowPosition(windowId, left, top) {\n    return new Promise((resolve, reject) => {\n      extension.windows.update(windowId, { left, top }, () => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * get current focused opened window\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/getLastFocused\n   * @returns Promise of Window object\n   */\n  getLastFocusedWindow() {\n    return new Promise((resolve, reject) => {\n      extension.windows.getLastFocused((windowObject) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(windowObject);\n      });\n    });\n  }\n\n  /**\n   * close current opned window\n   * @returns Promise of no argument and err if occurs\n   */\n  closeCurrentWindow() {\n    return extension.windows.getCurrent((windowCurrent) => {\n      return extension.windows.remove(windowCurrent.id);\n    });\n  }\n\n  /**\n   * load and transform version then return version of extension\n   * @returns version of extensions with remodified if prerelease\n   */\n  getVersion() {\n    const { version, version_name: versionName } =\n      extension.runtime.getManifest();\n\n    const versionParts = version.split('.');\n    if (versionName) {\n      // Chrome: the build type is store as `version_name` in the manifest\n      const buildType = versionName;\n      if (versionParts.length < 4) {\n        throw new Error(`Version missing build number: '${version}'`);\n      }\n      const [major, minor, patch, buildVersion] = versionParts;\n\n      return `${major}.${minor}.${patch}-${buildType}.${buildVersion}`;\n    } else if (versionParts.length === 4) {\n      // On Firefox, the build type and build version are in the fourth part of version\n      const [major, minor, patch, prerelease] = versionParts;\n      const matches = prerelease.match(/^(\\w+)(\\d)+$/u);\n      if (matches === null) {\n        throw new Error(`Version contains invalid prerelease: ${version}`);\n      }\n      const [, buildType, buildVersion] = matches;\n      return `${major}.${minor}.${patch}-${buildType}.${buildVersion}`;\n    }\n\n    // If there no `version_name` and there are only 3 version parts, then\n    // this is not a prerelease and the version requires no modification.\n    return version;\n  }\n\n  openExtensionInBrowser(\n    route = null,\n    queryString = null,\n    keepWindowOpen = false\n  ) {\n    let extensionUrl = extension.runtime.getUrl('popup.html');\n\n    if (route) {\n      extensionUrl += `#${route}`;\n    }\n\n    if (queryString) {\n      extensionUrl += `?${queryString}`;\n    }\n\n    this.openTab({ url: extensionUrl });\n    if (getEnvironment() !== ENVIRONMENT_TYPE_BACKGROUND && !keepWindowOpen) {\n      window.close();\n    }\n  }\n\n  /**\n   * with platform info will do callback function\n   * @param {'callback'} cb - a callback function will be called\n   * @returns void\n   */\n  getPlatformInfo(cb) {\n    try {\n      extension.runtime.getPlatformInfo((platform) => {\n        cb(null, platform);\n      });\n    } catch (e) {\n      cb(e);\n      return;\n    }\n  }\n\n  /**\n   * display transaction result in case of error of confirmed\n   * @param {'tx'} txMeta - tx data of transaction\n   * @param {'rpcPrefs'} rpcPrefs - Configuration for rpc endpoint\n   */\n  showTransactionNotification(txMeta, rpcPrefs) {}\n\n  /**\n   * Add an function as callback when windows has onRemoved event happen\n   * @param {'listenser'} listener - a event subcriptions function will be called\n   */\n  addOnRemovedListener(listener) {\n    extension.windows.onRemoved.addListener(listener);\n  }\n\n  /**\n   * get information about all windows openned pass them in callback\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/getAll\n   * @returns Promise of an array of Window object\n   */\n  getAllWindows() {\n    return new Promise((resolve, reject) => {\n      extension.windows.getAll((windows) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(windows);\n      });\n    });\n  }\n\n  /**\n   * get current Active Tab\n   * @ref https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/query\n   * @returns a Promise of array of Tab\n   */\n  getActiveTab() {\n    return new Promise((resolve, reject) => {\n      extension.tabs.query({ active: true }, (tabs) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(tabs);\n      });\n    });\n  }\n\n  /**\n   * get Current using Tab\n   * @returns a Promise of Tab\n   */\n  currentTab() {\n    return new Promise((resolve, reject) => {\n      extension.tabs.getCurrent((tab) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(tab);\n      });\n    });\n  }\n\n  /**\n   * switch view to Tab with tabId\n   * @param {'tabId'} tabId - is a Tab id\n   * @returns a Promise of Tab\n   */\n  switchToTab(tabId) {\n    return new Promise((resolve, reject) => {\n      extension.tabs.update(tabId, { highlighted: true }, (tab) => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve(err);\n      });\n    });\n  }\n\n  /**\n   * close the tab by tabId\n   * @param {tabid} tabId - is a Tab id\n   * @returns null in case of successful and err if occured\n   */\n  closeTab(tabId) {\n    return new Promise((resolve, reject) => {\n      extension.tabs.remove(tabId, () => {\n        const err = checkForError();\n        if (err) {\n          return reject(err);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  _showConfirmedTransaction(txMeta, rpcPrefs) {}\n\n  _showFailedTransaction(txMeta, errorMessage) {}\n\n  _showNotification(title, message, url) {}\n\n  _subcribeToNotificationClicked() {}\n\n  _viewOnEtherscan(url) {}\n}\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/platforms/extension.test.js",["190","191","192"],"import extension from 'extensionizer';\nimport ExtensionPlatform from './extension';\n\njest.mock('extensionizer', () => {\n  return {\n    runtime: {\n      getManifest: jest.fn(),\n    },\n  };\n});\n\ndescribe('extension platforms', () => {\n  \n})","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/sentry-install.js",["193"],"import setupSentry from './lib/setupSentry';\n\n// setup sentry error reporting\nglobal.sentry = setupSentry(() => {\n    release: process.env.WALLET_VERSION,\n    getState: () => global.getSentryState?.() || {},\n});","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/scripts/wallet-controller.js",["194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423"],"/**\n * @file Main Wallet Controller to handle Event from network and Action of User\n */\nimport EventEmitter from 'events';\nimport pump from 'pump';\nimport { debounce } from 'lodash';\nimport { Mutex } from 'await-semaphore';\nimport { stripHexPrefix } from 'ethereumjs-util';\nimport log from 'loglevel';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport createEngineStream from 'json-rpc-middleware-stream/engineStream';\nimport createFilterMiddleware from 'eth-json-rpc-filters';\nimport createSubscriptionManager from 'eth-json-rpc-filters/subscriptionManager';\nimport { providerAsMiddleware } from 'eth-json-rpc-middleware';\nimport KeyringController from 'eth-keyring-controller';\nimport { errorCodes as rpcErrorCodes, ethErrors } from 'eth-rpc-errors';\nimport TrezorKeyring from 'eth-trezor-keyring';\nimport LedgerBridgeKeyring from '@metamask/eth-ledger-bridge-keyring';\nimport LatticeKeyring from 'eth-lattice-keyring';\nimport { MetaMaskKeyring as QRHardwareKeyring } from '@keystonehq/metamask-airgapped-keyring';\nimport EthQuery from 'eth-query';\nimport nanoid from 'nanoid';\nimport { captureException } from '@sentry/browser';\nimport {\n  AddressBookController,\n  ApprovalController,\n  ControllerMessenger,\n  CurrencyRateController,\n  PhishingController,\n  NotificationController,\n  GasFeeController,\n  TokenListController,\n  TokensController,\n  TokenRatesController,\n  CollectiblesController,\n  AssetsContractController,\n  CollectibleDetectionController,\n} from '@metamask/controllers';\n\nexport const Wallet_CONTROLLER_EVENTS = {\n  // Fired after state changes that impact the extension badge (unapproved msg count)\n  // The process of updating the badge happens in app/scripts/background.js.\n  UPDATE_BADGE: 'updateBadge',\n  // TODO: Add this and similar enums to @Wallet/controllers and export them\n  APPROVAL_STATE_CHANGE: 'ApprovalController:stateChange',\n};\n\nexport default class WalletController extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Object} opts\n   */\n  constructor(opts) {\n    super();\n\n    this.defaultMaxListeners = 20;\n\n    this.sendUpdate = debounce(\n      this.privateSendUpdate.bind(this),\n      MILLISECOND * 200\n    );\n    this.opts = opts;\n    this.extension = opts.extension;\n    this.platform = opts.platform;\n    const initState = opts.initState || {};\n    const version = this.platform.getVersion();\n    this.recordFirstTimeInfo(initState);\n\n    // this keeps track of how many \"controllerStream\" connections are open\n    // the only thing that uses controller connections are open Wallet UI instances\n    this.activeControllerConnections = 0;\n\n    this.getRequestAccountTabIds = opts.getRequestAccountTabIds;\n    this.getOpenWalletTabsIds = opts.getOpenWalletTabsIds;\n\n    this.controllerMessenger = new ControllerMessenger();\n\n    // observable state store\n    this.store = new ComposableObservableStore({\n      state: initState,\n      controllerMessenger: this.controllerMessenger,\n      persist: true,\n    });\n\n    // external connections by origin\n    // Do not modify directly. Use the associated methods.\n    this.connections = {};\n\n    // lock to ensure only one vault created at once\n    this.createVaultMutex = new Mutex();\n\n    this.extension.runtime.onInstalled.addListener((details) => {\n      if (details.reason === 'update' && version === '8.1.0') {\n        this.platform.openExtensionInBrowser();\n      }\n    });\n\n    // next, we will initialize the controllers\n    // controller initialization order matters\n\n    this.approvalController = new ApprovalController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'ApprovalController',\n      }),\n      showApprovalRequest: opts.showUserConfirmation,\n    });\n\n    this.networkController = new NetworkController(initState.NetworkController);\n    this.networkController.setInfuraProjectId(opts.infuraProjectId);\n\n    // now we can initialize the RPC provider, which other controllers require\n    this.initializeProvider();\n    this.provider =\n      this.networkController.getProviderAndBlockTracker().provider;\n    this.blockTracker =\n      this.networkController.getProviderAndBlockTracker().blockTracker;\n\n    // preferencesController  - On Developing\n    /*\n    this.preferencesController = new PreferencesController({\n\n    });\n    */\n\n    // tokenController - On Developing\n    /*\n    this.tokensController = new TokensController({\n\n    });\n    */\n\n    // asset Contract Controller - On Developing\n    /*\n    this.assetsContractController = new AssetsContractController({\n      provider: this.provider,\n    });\n    */\n\n    // collectibles Controller - On Developing\n    /*\n    this.collectiblesController = new CollectiblesController({\n\n    });\n    */\n\n    // metaMetricsController - On Developing\n    /*\n    this.metaMetricsController = new MetaMetricsController({\n    \n    });\n    */\n\n    // gasFee Controller\n    /*\n    const gasFeeMessenger = this.controllerMessenger.getRestricted({\n      name: 'GasFeeController',\n    });\n\n    const gasApiBaseUrl = process.env.SWAPS_USE_DEV_APIS\n      ? GAS_DEV_API_BASE_URL\n      : GAS_API_BASE_URL;\n    \n    \n    this.gasFeeController = new GasFeeController({\n    \n    });\n    */\n    // hardware Key Ring - on Developing\n    /*\n    this.qrHardwareKeyring = new QRHardwareKeyring();\n    */\n\n    // app State Controller - on Developing\n    /*\n    this.appStateController = new AppStateController({\n    \n    });\n    */\n\n    // Currency Rate Controller - on Developing\n    /*\n    const currencyRateMessenger = this.controllerMessenger.getRestricted({\n\n    });\n    this.currencyRateController = new CurrencyRateController({\n\n    });\n    */\n\n    // Token List Controller - on Developing\n    /*\n    const tokenListMessenger = this.controllerMessenger.getRestricted({\n      name: 'TokenListController',\n    });\n    this.tokenListController = new TokenListController({\n    });\n    */\n\n    // token exchange rate tracker - on Developing\n    /*\n    this.tokenRatesController = new TokenRatesController({\n    \n    });\n    */\n\n    // ens Controller - on Developing\n    /*\n    this.ensController = new EnsController({\n    \n    })\n    */\n\n    // account tracker watches balances, nonces, and any code at their address\n    /*\n    this.accountTracker = new AccountTracker({\n    \n    });\n    */\n\n    // start and stop polling for balances based on activeControllerConnections - on Developing\n    /*\n    this.on('controllerConnectionChanged', (activeControllerConnections) => {\n    \n    }\n    */\n\n    // Permission Controller - On Developing\n    /*\n    this.permissionController = new PermissionController({\n    \n    });\n    */\n\n    // Permission Log Controller - On Developing\n    /*\n    this.permissionLogController = new PermissionLogController({\n    \n    });\n    */\n\n    // Subject Metadata Controller - On Developing\n    /*\n    this.subjectMetadataController = new SubjectMetadataController({\n    \n    });\n    */\n\n    // Detect Token Controller - On Developing\n    /*\n    this.detectTokensController = new DetectTokensController({\n    \n    })\n    */\n\n    // Address Book Controller - ON Developing\n    /* \n    this.addressBookController = new AddressBookController(\n    );\n    */\n\n    // Alert Controller - On Developing\n    /*\n    this.alertController = new AlertController({\n    \n    });\n    */\n\n    // Three Box Controller - On Developing\n    /*\n    this.threeBoxController = new ThreeBoxController({\n    \n    });\n    */\n\n    // Tx Controller - On Developing\n    /*\n    this.txController = new TransactionController({\n    \n    });\n    */\n\n    // Swap Controller - On Developing\n    /*\n    this.swapsController = new SwapsController({\n    \n    })\n    */\n\n    // this.setupControllerEventSubscriptions();\n\n    // TODO:LegacyProvider: Delete\n    // this.publicConfigStore = this.createPublicConfigStore();\n  }\n  /**\n   * Sets up BaseController V2 event subscriptions. Currently, this includes\n   * the subscriptions necessary to notify permission subjects of account\n   * changes.\n   *\n   * Some of the subscriptions in this method are ControllerMessenger selector\n   * event subscriptions. See the relevant @Wallet/controllers documentation\n   * for more information.\n   *\n   * Note that account-related notifications emitted when the extension\n   * becomes unlocked are handled in WalletController._onUnlock.\n   */\n  setupControllerEventSubscriptions() {}\n\n  /**\n   * Constructor helper: initialize a provider.\n   */\n  initializeProvider() {}\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * Constructor helper: initialize a public config store.\n   * This store is used to make some config info available to Dapps synchronously.\n   */\n  createPublicConfigStore() {}\n\n  /**\n   * Gets relevant state for the provider of an external origin.\n   *\n   * @param {string} origin - The origin to get the provider state for.\n   * @returns {Promise<{\n   *  isUnlocked: boolean,\n   *  networkVersion: string,\n   *  chainId: string,\n   *  accounts: string[],\n   * }>} An object with relevant state properties.\n   */\n  async getProviderState(origin) {}\n\n  //=============================================================================\n  // EXPOSED TO THE UI SUBSYSTEM\n  //=============================================================================\n\n  /**\n   * The Wallet-state of the various controllers, made available to the UI\n   *\n   * @returns {Object} status\n   */\n  getState() {\n    const { vault } = this.keyringController.store.getState();\n    const isInitialized = Boolean(vault);\n\n    return {\n      isInitialized,\n      ...this.memStore.getFlatState(),\n    };\n  }\n\n  /**\n   * Returns an Object containing API Callback Functions.\n   * These functions are the interface for the UI.\n   * The API object can be transmitted over a stream via JSON-RPC.\n   *\n   * @returns {Object} Object containing API functions.\n   */\n  getApi() {\n    const {\n      addressBookController,\n      alertController,\n      approvalController,\n      appStateController,\n      collectiblesController,\n      collectibleDetectionController,\n      currencyRateController,\n      detectTokensController,\n      ensController,\n      gasFeeController,\n      keyringController,\n      metaMetricsController,\n      networkController,\n      notificationController,\n      onboardingController,\n      permissionController,\n      preferencesController,\n      qrHardwareKeyring,\n      swapsController,\n      threeBoxController,\n      tokensController,\n      txController,\n    } = this;\n    return {};\n  }\n\n  //=============================================================================\n  // VAULT / KEYRING RELATED METHODS\n  //=============================================================================\n\n  /**\n   * Creates a new Vault and create a new keychain.\n   *\n   * A vault, or KeyringController, is a controller that contains\n   * many different account strategies, currently called Keyrings.\n   * Creating it new means wiping all previous keyrings.\n   *\n   * A keychain, or keyring, controls many accounts with a single backup and signing strategy.\n   * For example, a mnemonic phrase can generate many accounts, and is a keyring.\n   *\n   * @param {string} password\n   * @returns {Object} vault\n   */\n  async createNewVaultAndKeychain(password) {}\n\n  /**\n   * Create a new Vault and restore an existent keyring.\n   * @param {string} password\n   * @param {string} seed\n   */\n  async createNewVaultAndRestore(password, seed) {}\n\n  /**\n   * Get an account balance from the AccountTracker or request it directly from the network.\n   * @param {string} address - The account address\n   * @param {EthQuery} ethQuery - The EthQuery instance to use when asking the network\n   */\n  getBalance(address, ethQuery) {}\n\n  /**\n   * Collects all the information that we want to share\n   * with the mobile client for syncing purposes\n   * @returns {Promise<Object>} Parts of the state that we want to syncx\n   */\n  async fetchInfoToSync() {}\n\n  /*\n   * Submits the user's password and attempts to unlock the vault.\n   * Also synchronizes the preferencesController, to ensure its schema\n   * is up to date with known accounts once the vault is decrypted.\n   *\n   * @param {string} password - The user's password\n   * @returns {Promise<object>} The keyringController update.\n   */\n  async submitPassword(password) {}\n\n  /**\n   * Submits a user's password to check its validity.\n   *\n   * @param {string} password The user's password\n   */\n  async verifyPassword(password) {}\n\n  /**\n   * @type Identity\n   * @property {string} name - The account nickname.\n   * @property {string} address - The account's ethereum address, in lower case.\n   * @property {boolean} mayBeFauceting - Whether this account is currently\n   * receiving funds from our automatic Ropsten faucet.\n   */\n\n  /**\n   * Sets the first address in the state to the selected address\n   */\n  selectFirstIdentity() {}\n\n  //\n  // Hardware Controller\n  //\n  async getKeyringForDevice(deviceName, hdPath = null) {}\n\n  async attemptLedgerTransportCreation() {}\n\n  async establishLedgerTransportPreference() {}\n\n  /**\n   * Fetch account list from a trezor device.\n   *\n   * @returns [] accounts\n   */\n  async connectHardware(deviceName, page, hdPath) {}\n\n  /**\n   * Check if the device is unlocked\n   *\n   * @returns {Promise<boolean>}\n   */\n  async checkHardwareStatus(deviceName, hdPath) {}\n\n  /**\n   * Clear\n   *\n   * @returns {Promise<boolean>}\n   */\n  async forgetDevice(deviceName) {}\n\n  /**\n   * get hardware account label\n   *\n   * @return string label\n   */\n  getAccountLabel(name, index, hdPathDescription) {}\n\n  /**\n   * Imports an account from a Trezor or Ledger device.\n   *\n   * @returns {} keyState\n   */\n  async unlockHardwareWalletAccount(\n    index,\n    deviceName,\n    hdPath,\n    hdPathDescription\n  ) {}\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase Keyring.\n   *\n   * @returns {} keyState\n   */\n  async addNewAccount() {}\n\n  /**\n   * Verifies the validity of the current vault's seed phrase.\n   *\n   * Validity: seed phrase restores the accounts belonging to the current vault.\n   *\n   * Called when the first account is created and on unlocking the vault.\n   *\n   * @returns {Promise<string>} Seed phrase to be confirmed by the user.\n   */\n  async verifySeedPhrase() {}\n\n  /**\n   * Clears the transaction history, to allow users to force-reset their nonces.\n   * Mostly used in development environments, when networks are restarted with\n   * the same network ID.\n   *\n   * @returns {Promise<string>} The current selected address.\n   */\n  async resetAccount() {}\n\n  /**\n   * Gets the permitted accounts for the specified origin. Returns an empty\n   * array if no accounts are permitted.\n   *\n   * @param {string} origin - The origin whose exposed accounts to retrieve.\n   * @returns {Promise<string[]>} The origin's permitted accounts, or an empty\n   * array.\n   */\n  async getPermittedAccounts(origin) {}\n\n  /**\n   * Stops exposing the account with the specified address to all third parties.\n   * Exposed accounts are stored in caveats of the eth_accounts permission. This\n   * method uses `PermissionController.updatePermissionsByCaveat` to\n   * remove the specified address from every eth_accounts permission. If a\n   * permission only included this address, the permission is revoked entirely.\n   *\n   * @param {string} targetAccount - The address of the account to stop exposing\n   * to third parties.\n   */\n  removeAllAccountPermissions(targetAccount) {}\n\n  /**\n   * Removes an account from state / storage.\n   *\n   * @param {string[]} address - A hex address\n   *\n   */\n  async removeAccount(address) {}\n\n  /**\n   * Imports an account with the specified import strategy.\n   * These are defined in app/scripts/account-import-strategies\n   * Each strategy represents a different way of serializing an Ethereum key pair.\n   *\n   * @param {string} strategy - A unique identifier for an account import strategy.\n   * @param {any} args - The data required by that strategy to import an account.\n   * @param {Function} cb - A callback function called with a state update on success.\n   */\n  async importAccountWithStrategy(strategy, args) {}\n\n  //\n  // Identity Management (signature operations)\n  //\n\n  /**\n   * Called when a Dapp suggests a new tx to be signed.\n   * this wrapper needs to exist so we can provide a reference to\n   *  \"newUnapprovedTransaction\" before \"txController\" is instantiated\n   *\n   * @param {Object} msgParams - The params passed to eth_sign.\n   * @param {Object} req - (optional) the original request, containing the origin\n   */\n  async newUnapprovedTransaction(txParams, req) {}\n\n  // eth_sign methods:\n\n  /**\n   * Called when a Dapp uses the eth_sign method, to request user approval.\n   * eth_sign is a pure signature of arbitrary data. It is on a deprecation\n   * path, since this data can be a transaction, or can leak private key\n   * information.\n   *\n   * @param {Object} msgParams - The params passed to eth_sign.\n   * @param {Function} cb - The callback function called with the signature.\n   */\n  async newUnsignedMessage(msgParams, req) {}\n\n  /**\n   * Signifies user intent to complete an eth_sign method.\n   *\n   * @param {Object} msgParams - The params passed to eth_call.\n   * @returns {Promise<Object>} Full state update.\n   */\n  async signMessage(msgParams) {}\n\n  /**\n   * Used to cancel a message submitted via eth_sign.\n   *\n   * @param {string} msgId - The id of the message to cancel.\n   */\n  cancelMessage(msgId) {}\n\n  // personal_sign methods:\n\n  /**\n   * Called when a dapp uses the personal_sign method.\n   * This is identical to the Geth eth_sign method, and may eventually replace\n   * eth_sign.\n   *\n   * We currently define our eth_sign and personal_sign mostly for legacy Dapps.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Function} cb - The callback function called with the signature.\n   * Passed back to the requesting Dapp.\n   */\n  async newUnsignedPersonalMessage(msgParams, req) {}\n\n  /**\n   * Signifies a user's approval to sign a personal_sign message in queue.\n   * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async signPersonalMessage(msgParams) {}\n\n  /**\n   * Used to cancel a personal_sign type message.\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelPersonalMessage(msgId) {}\n\n  // eth_decrypt methods\n\n  /**\n   * Called when a dapp uses the eth_decrypt method.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Object} req - (optional) the original request, containing the origin\n   * Passed back to the requesting Dapp.\n   */\n  async newRequestDecryptMessage(msgParams, req) {}\n\n  /**\n   * Only decrypt message and don't touch transaction state\n   *\n   * @param {Object} msgParams - The params of the message to decrypt.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async decryptMessageInline(msgParams) {}\n\n  /**\n   * Signifies a user's approval to decrypt a message in queue.\n   * Triggers decrypt, and the callback function from newUnsignedDecryptMessage.\n   *\n   * @param {Object} msgParams - The params of the message to decrypt & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async decryptMessage(msgParams) {}\n\n  /**\n   * Used to cancel a eth_decrypt type message.\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelDecryptMessage(msgId) {}\n\n  // eth_getEncryptionPublicKey methods\n\n  /**\n   * Called when a dapp uses the eth_getEncryptionPublicKey method.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Object} req - (optional) the original request, containing the origin\n   * Passed back to the requesting Dapp.\n   */\n  async newRequestEncryptionPublicKey(msgParams, req) {}\n\n  /**\n   * Signifies a user's approval to receiving encryption public key in queue.\n   * Triggers receiving, and the callback function from newUnsignedEncryptionPublicKey.\n   *\n   * @param {Object} msgParams - The params of the message to receive & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async encryptionPublicKey(msgParams) {}\n\n  /**\n   * Used to cancel a eth_getEncryptionPublicKey type message.\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelEncryptionPublicKey(msgId) {}\n\n  // eth_signTypedData methods\n\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param {Object} msgParams - The params passed to eth_signTypedData.\n   * @param {Function} cb - The callback function, called with the signature.\n   */\n  newUnsignedTypedMessage(msgParams, req, version) {}\n\n  /**\n   * The method for a user approving a call to eth_signTypedData, per EIP 712.\n   * Triggers the callback in newUnsignedTypedMessage.\n   *\n   * @param {Object} msgParams - The params passed to eth_signTypedData.\n   * @returns {Object} Full state update.\n   */\n  async signTypedMessage(msgParams) {}\n\n  /**\n   * Used to cancel a eth_signTypedData type message.\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelTypedMessage(msgId) {}\n\n  /**\n   * @returns {boolean} true if the keyring type supports EIP-1559\n   */\n  async getCurrentAccountEIP1559Compatibility() {}\n\n  //=============================================================================\n  // END (VAULT / KEYRING RELATED METHODS)\n  //=============================================================================\n\n  /**\n   * Allows a user to attempt to cancel a previously submitted transaction\n   * by creating a new transaction.\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   *  attempt to cancel\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   *  instead of allowing this method to generate them\n   * @returns {Object} Wallet state\n   */\n  async createCancelTransaction(\n    originalTxId,\n    customGasSettings,\n    newTxMetaProps\n  ) {}\n\n  /**\n   * Allows a user to attempt to speed up a previously submitted transaction\n   * by creating a new transaction.\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   *  attempt to speed up\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   *  instead of allowing this method to generate them\n   * @returns {Object} Wallet state\n   */\n  async createSpeedUpTransaction(\n    originalTxId,\n    customGasSettings,\n    newTxMetaProps\n  ) {}\n\n  //=============================================================================\n  // PASSWORD MANAGEMENT\n  //=============================================================================\n\n  /**\n   * Allows a user to begin the seed phrase recovery process.\n   * @param {Function} cb - A callback function called when complete.\n   */\n  markPasswordForgotten() {}\n\n  /**\n   * Allows a user to end the seed phrase recovery process.\n   * @param {Function} cb - A callback function called when complete.\n   */\n  unMarkPasswordForgotten() {}\n\n  //=============================================================================\n  // SETUP\n  //=============================================================================\n\n  /**\n   * A runtime.MessageSender object, as provided by the browser:\n   * @see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/MessageSender\n   * @typedef {Object} MessageSender\n   */\n\n  /**\n   * Used to create a multiplexed stream for connecting to an untrusted context\n   * like a Dapp or other extension.\n   * @param {*} connectionStream - The Duplex stream to connect to.\n   * @param {MessageSender} sender - The sender of the messages on this stream\n   */\n  setupUntrustedCommunication(connectionStream, sender) {}\n\n  /**\n   * Used to create a multiplexed stream for connecting to a trusted context,\n   * like our own user interfaces, which have the provider APIs, but also\n   * receive the exported API from this controller, which includes trusted\n   * functions, like the ability to approve transactions or sign messages.\n   *\n   * @param {*} connectionStream - The duplex stream to connect to.\n   * @param {MessageSender} sender - The sender of the messages on this stream\n   */\n  setupTrustedCommunication(connectionStream, sender) {}\n\n  /**\n   * Called when we detect a suspicious domain. Requests the browser redirects\n   * to our anti-phishing page.\n   *\n   * @private\n   * @param {*} connectionStream - The duplex stream to the per-page script,\n   * for sending the reload attempt to.\n   * @param {string} hostname - The hostname that triggered the suspicion.\n   */\n  sendPhishingWarning(connectionStream, hostname) {}\n\n  /**\n   * A method for providing our API over a stream using JSON-RPC.\n   * @param {*} outStream - The stream to provide our API over.\n   */\n  setupControllerConnection(outStream) {}\n\n  /**\n   * A method for serving our ethereum provider over a given stream.\n   * @param {*} outStream - The stream to provide over.\n   * @param {MessageSender} sender - The sender of the messages on this stream\n   * @param {boolean} isInternal - True if this is a connection with an internal process\n   */\n  setupProviderConnection(outStream, sender, isInternal) {}\n\n  /**\n   * A method for creating a provider that is safely restricted for the requesting subject.\n   *\n   * @param {Object} options - Provider engine options\n   * @param {string} options.origin - The origin of the sender\n   * @param {string} options.location - The full URL of the sender\n   * @param {string} options.subjectType - The type of the sender subject.\n   * @param {tabId} [options.tabId] - The tab ID of the sender - if the sender is within a tab\n   **/\n  setupProviderEngine({ origin, location, subjectType, tabId }) {}\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * A method for providing our public config info over a stream.\n   * This includes info we like to be synchronous if possible, like\n   * the current selected account, and network ID.\n   *\n   * Since synchronous methods have been deprecated in web3,\n   * this is a good candidate for deprecation.\n   *\n   * @param {*} outStream - The stream to provide public config over.\n   */\n  setupPublicConfig(outStream) {}\n\n  /**\n   * Adds a reference to a connection by origin. Ignores the 'Wallet' origin.\n   * Caller must ensure that the returned id is stored such that the reference\n   * can be deleted later.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {Object} options - Data associated with the connection\n   * @param {Object} options.engine - The connection's JSON Rpc Engine\n   * @returns {string} The connection's id (so that it can be deleted later)\n   */\n  addConnection(origin, { engine }) {}\n\n  /**\n   * Deletes a reference to a connection, by origin and id.\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {string} id - The connection's id, as returned from addConnection.\n   */\n  removeConnection(origin, id) {}\n\n  /**\n   * Causes the RPC engines associated with the connections to the given origin\n   * to emit a notification event with the given payload.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {unknown} payload - The event payload.\n   */\n  notifyConnections(origin, payload) {}\n\n  /**\n   * Causes the RPC engines associated with all connections to emit a\n   * notification event with the given payload.\n   *\n   * If the \"payload\" parameter is a function, the payload for each connection\n   * will be the return value of that function called with the connection's\n   * origin.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * @param {unknown} payload - The event payload, or payload getter function.\n   */\n  notifyAllConnections(payload) {}\n\n  // handlers\n\n  /**\n   * Handle a KeyringController update\n   * @param {Object} state - the KC state\n   * @returns {Promise<void>}\n   * @private\n   */\n  async _onKeyringControllerUpdate(state) {}\n\n  /**\n   * Handle global application unlock.\n   * Notifies all connections that the extension is unlocked, and which\n   * account(s) are currently accessible, if any.\n   */\n  _onUnlock() {}\n\n  /**\n   * Handle global application lock.\n   * Notifies all connections that the extension is locked.\n   */\n  _onLock() {}\n\n  /**\n   * Handle memory state updates.\n   * - Ensure isClientOpenAndUnlocked is updated\n   * - Notifies all connections with the new provider network state\n   *   - The external providers handle diffing the state\n   */\n  _onStateUpdate(newState) {}\n\n  /**\n   * A method for emitting the full Wallet state to all registered listeners.\n   * @private\n   */\n  privateSendUpdate() {}\n\n  /**\n   * @returns {boolean} Whether the extension is unlocked.\n   */\n  isUnlocked() {}\n\n  //=============================================================================\n  // MISCELLANEOUS\n  //=============================================================================\n\n  /**\n   * Returns the nonce that will be associated with a transaction once approved\n   * @param {string} address - The hex string address for the transaction\n   * @returns {Promise<number>}\n   */\n  async getPendingNonce(address) {}\n\n  /**\n   * Returns the next nonce according to the nonce-tracker\n   * @param {string} address - The hex string address for the transaction\n   * @returns {Promise<number>}\n   */\n  async getNextNonce(address) {}\n\n  /**\n   * Migrate address book state from old to new chainId.\n   *\n   * Address book state is keyed by the `networkStore` state from the network controller. This value is set to the\n   * `networkId` for our built-in Infura networks, but it's set to the `chainId` for custom networks.\n   * When this `chainId` value is changed for custom RPC endpoints, we need to migrate any contacts stored under the\n   * old key to the new key.\n   *\n   * The `duplicate` parameter is used to specify that the contacts under the old key should not be removed. This is\n   * useful in the case where two RPC endpoints shared the same set of contacts, and we're not sure which one each\n   * contact belongs under. Duplicating the contacts under both keys is the only way to ensure they are not lost.\n   *\n   * @param {string} oldChainId - The old chainId\n   * @param {string} newChainId - The new chainId\n   * @param {boolean} [duplicate] - Whether to duplicate the addresses on both chainIds (default: false)\n   */\n  async migrateAddressBookState(oldChainId, newChainId, duplicate = false) {}\n\n  //=============================================================================\n  // CONFIG\n  //=============================================================================\n\n  // Log blocks\n\n  /**\n   * A method for selecting a custom URL for an ethereum RPC provider and updating it\n   * @param {string} rpcUrl - A URL for a valid Ethereum RPC API.\n   * @param {string} chainId - The chainId of the selected network.\n   * @param {string} ticker - The ticker symbol of the selected network.\n   * @param {string} [nickname] - Nickname of the selected network.\n   * @param {Object} [rpcPrefs] - RPC preferences.\n   * @param {string} [rpcPrefs.blockExplorerUrl] - URL of block explorer for the chain.\n   * @returns {Promise<String>} - The RPC Target URL confirmed.\n   */\n  async updateAndSetCustomRpc(\n    rpcUrl,\n    chainId,\n    ticker = 'ETH',\n    nickname,\n    rpcPrefs\n  ) {}\n\n  /**\n   * A method for selecting a custom URL for an ethereum RPC provider.\n   * @param {string} rpcUrl - A URL for a valid Ethereum RPC API.\n   * @param {string} chainId - The chainId of the selected network.\n   * @param {string} ticker - The ticker symbol of the selected network.\n   * @param {string} nickname - Optional nickname of the selected network.\n   * @returns {Promise<String>} The RPC Target URL confirmed.\n   */\n  async setCustomRpc(\n    rpcUrl,\n    chainId,\n    ticker = 'ETH',\n    nickname = '',\n    rpcPrefs = {}\n  ) {}\n\n  /**\n   * A method for deleting a selected custom URL.\n   * @param {string} rpcUrl - A RPC URL to delete.\n   */\n  async delCustomRpc(rpcUrl) {}\n\n  /**\n   * Returns the first RPC info object that matches at least one field of the\n   * provided search criteria. Returns null if no match is found\n   *\n   * @param {Object} rpcInfo - The RPC endpoint properties and values to check.\n   * @returns {Object} rpcInfo found in the frequentRpcList\n   */\n  findCustomRpcBy(rpcInfo) {}\n\n  async initializeThreeBox() {}\n\n  /**\n   * Sets the Ledger Live preference to use for Ledger hardware wallet support\n   * @param {bool} bool - the value representing if the users wants to use Ledger Live\n   */\n  async setLedgerTransportPreference(transportType) {}\n\n  /**\n   * A method for initializing storage the first time.\n   * @param {Object} initState - The default state to initialize with.\n   * @private\n   */\n  recordFirstTimeInfo(initState) {}\n\n  // TODO: Replace isClientOpen methods with `controllerConnectionChanged` events.\n  /* eslint-disable accessor-pairs */\n  /**\n   * A method for recording whether the Wallet user interface is open or not.\n   * @param {boolean} open\n   */\n  set isClientOpen(open) {}\n\n  /**\n   * A method that is called by the background when all instances of Wallet are closed.\n   * Currently used to stop polling in the gasFeeController.\n   */\n  onClientClosed() {}\n\n  /**\n   * A method that is called by the background when a particular environment type is closed (fullscreen, popup, notification).\n   * Currently used to stop polling in the gasFeeController for only that environement type\n   */\n  onEnvironmentTypeClosed(environmentType) {}\n\n  /**\n   * Adds a domain to the PhishingController safelist\n   * @param {string} hostname - the domain to safelist\n   */\n  safelistPhishingDomain(hostname) {}\n\n  /**\n   * Locks Wallet\n   */\n  setLocked() {}\n}\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/shared/constants/app.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/shared/constants/transactions.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/env.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/setup.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/build.js",["424","425"],"// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production';\nprocess.env.ASSET_PATH = '/';\n\nvar webpack = require('webpack'),\n  config = require('../webpack.config');\n\ndelete config.chromeExtensionBoilerplate;\n\nconfig.mode = 'production';\n\nwebpack(config, function (err) {\n  if (err) throw err;\n});\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/env.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/utils/webserver.js",["426","427","428","429","430"],"// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'development';\nprocess.env.NODE_ENV = 'development';\nprocess.env.ASSET_PATH = '/';\n\nvar WebpackDevServer = require('webpack-dev-server'),\n  webpack = require('webpack'),\n  config = require('../webpack.config'),\n  env = require('./env'),\n  path = require('path');\n\nvar options = config.chromeExtensionBoilerplate || {};\nvar excludeEntriesToHotReload = options.notHotReload || [];\n\nfor (var entryName in config.entry) {\n  if (excludeEntriesToHotReload.indexOf(entryName) === -1) {\n    config.entry[entryName] = [\n      'webpack/hot/dev-server',\n      `webpack-dev-server/client?hot=true&hostname=localhost&port=${env.PORT}`,\n    ].concat(config.entry[entryName]);\n  }\n}\n\nconfig.plugins = [new webpack.HotModuleReplacementPlugin()].concat(\n  config.plugins || []\n);\n\ndelete config.chromeExtensionBoilerplate;\n\nvar compiler = webpack(config);\n\nvar server = new WebpackDevServer(\n  {\n    https: false,\n    hot: false,\n    client: false,\n    host: 'localhost',\n    port: env.PORT,\n    static: {\n      directory: path.join(__dirname, '../build'),\n    },\n    devMiddleware: {\n      publicPath: `http://localhost:${env.PORT}/`,\n      writeToDisk: true,\n    },\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    allowedHosts: 'all',\n  },\n  compiler\n);\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept();\n}\n\n(async () => {\n  await server.start();\n})();\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/webpack.config.js",["431","432","433","434","435","436","437","438"],"var webpack = require('webpack'),\n  path = require('path'),\n  fileSystem = require('fs-extra'),\n  env = require('./utils/env'),\n  CopyWebpackPlugin = require('copy-webpack-plugin'),\n  HtmlWebpackPlugin = require('html-webpack-plugin'),\n  TerserPlugin = require('terser-webpack-plugin');\n\nconst ASSET_PATH = process.env.ASSET_PATH || '/';\n\nvar alias = {\n  'react-dom': '@hot-loader/react-dom',\n};\n\n// load the secrets\nvar secretsPath = path.join(__dirname, 'secrets.' + env.NODE_ENV + '.js');\n\nvar fileExtensions = [\n  'jpg',\n  'jpeg',\n  'png',\n  'gif',\n  'eot',\n  'otf',\n  'svg',\n  'ttf',\n  'woff',\n  'woff2',\n];\n\nif (fileSystem.existsSync(secretsPath)) {\n  alias['secrets'] = secretsPath;\n}\n\nvar options = {\n  mode: process.env.NODE_ENV || 'development',\n  entry: {\n    newtab: path.join(__dirname, 'src', 'pages', 'Newtab', 'index.jsx'),\n    options: path.join(__dirname, 'src', 'pages', 'Options', 'index.jsx'),\n    popup: path.join(__dirname, 'src', 'pages', 'Popup', 'index.jsx'),\n    background: path.join(__dirname, 'src', 'pages', 'Background', 'index.js'),\n    contentScript: path.join(__dirname, 'src', 'pages', 'Content', 'index.js'),\n    devtools: path.join(__dirname, 'src', 'pages', 'Devtools', 'index.js'),\n    panel: path.join(__dirname, 'src', 'pages', 'Panel', 'index.jsx'),\n  },\n  chromeExtensionBoilerplate: {\n    notHotReload: ['contentScript', 'devtools'],\n  },\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: '[name].bundle.js',\n    clean: true,\n    publicPath: ASSET_PATH,\n  },\n  module: {\n    rules: [\n      {\n        // look for .css or .scss files\n        test: /\\.(css|scss)$/,\n        // in the `src` directory\n        use: [\n          {\n            loader: 'style-loader',\n          },\n          {\n            loader: 'css-loader',\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n      {\n        test: new RegExp('.(' + fileExtensions.join('|') + ')$'),\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]',\n        },\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html-loader',\n        exclude: /node_modules/,\n      },\n      { test: /\\.(ts|tsx)$/, loader: 'ts-loader', exclude: /node_modules/ },\n      {\n        test: /\\.(js|jsx)$/,\n        use: [\n          {\n            loader: 'source-map-loader',\n          },\n          {\n            loader: 'babel-loader',\n          },\n        ],\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  resolve: {\n    alias: alias,\n    extensions: fileExtensions\n      .map((extension) => '.' + extension)\n      .concat(['.js', '.jsx', '.ts', '.tsx', '.css']),\n  },\n  plugins: [\n    new webpack.ProgressPlugin(),\n    // expose and write the allowed env vars on the compiled bundle\n    new webpack.EnvironmentPlugin(['NODE_ENV']),\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: 'src/manifest/chrome.json',\n          to: path.join(__dirname, 'build'),\n          force: true,\n          transform: function (content, path) {\n            // generates the manifest file using the package.json informations\n            return Buffer.from(\n              JSON.stringify({\n                description: process.env.npm_package_description,\n                version: process.env.npm_package_version,\n                ...JSON.parse(content.toString()),\n              })\n            );\n          },\n        },\n      ],\n    }),\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: 'src/pages/Content/content.styles.css',\n          to: path.join(__dirname, 'build'),\n          force: true,\n        },\n      ],\n    }),\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: 'src/assets/img/icon-128.png',\n          to: path.join(__dirname, 'build'),\n          force: true,\n        },\n      ],\n    }),\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: 'src/assets/img/icon-34.png',\n          to: path.join(__dirname, 'build'),\n          force: true,\n        },\n      ],\n    }),\n    new HtmlWebpackPlugin({\n      template: path.join(__dirname, 'src', 'pages', 'Newtab', 'index.html'),\n      filename: 'newtab.html',\n      chunks: ['newtab'],\n      cache: false,\n    }),\n    new HtmlWebpackPlugin({\n      template: path.join(__dirname, 'src', 'pages', 'Options', 'index.html'),\n      filename: 'options.html',\n      chunks: ['options'],\n      cache: false,\n    }),\n    new HtmlWebpackPlugin({\n      template: path.join(__dirname, 'src', 'pages', 'Popup', 'index.html'),\n      filename: 'popup.html',\n      chunks: ['popup'],\n      cache: false,\n    }),\n    new HtmlWebpackPlugin({\n      template: path.join(__dirname, 'src', 'pages', 'Devtools', 'index.html'),\n      filename: 'devtools.html',\n      chunks: ['devtools'],\n      cache: false,\n    }),\n    new HtmlWebpackPlugin({\n      template: path.join(__dirname, 'src', 'pages', 'Panel', 'index.html'),\n      filename: 'panel.html',\n      chunks: ['panel'],\n      cache: false,\n    }),\n  ],\n  infrastructureLogging: {\n    level: 'info',\n  },\n};\n\nif (env.NODE_ENV === 'development') {\n  options.devtool = 'cheap-module-source-map';\n} else {\n  options.optimization = {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        extractComments: false,\n      }),\n    ],\n  };\n}\n\nmodule.exports = options;\n","/Users/tuannguyenanh/workspace/blockchain/my-wallet/jest.config.js",[],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/helpers/protect-intrinsics-helpers.js",["439","440"],"/Users/tuannguyenanh/workspace/blockchain/my-wallet/src/test/helpers/setup-helper.js",["441","442"],{"ruleId":"443","severity":1,"message":"444","line":1,"column":1,"nodeType":"445","endLine":5,"endColumn":3},{"ruleId":"446","severity":2,"message":"447","line":9,"column":23,"nodeType":"448","messageId":"449","endLine":9,"endColumn":50},{"ruleId":"446","severity":2,"message":"447","line":25,"column":31,"nodeType":"448","messageId":"449","endLine":25,"endColumn":69},{"ruleId":"446","severity":2,"message":"447","line":26,"column":31,"nodeType":"448","messageId":"449","endLine":26,"endColumn":69},{"ruleId":"446","severity":2,"message":"447","line":27,"column":31,"nodeType":"448","messageId":"449","endLine":27,"endColumn":69},{"ruleId":"450","severity":1,"message":"451","line":8,"column":9,"nodeType":"452","messageId":"453","endLine":8,"endColumn":15},{"ruleId":"450","severity":1,"message":"454","line":9,"column":7,"nodeType":"452","messageId":"453","endLine":9,"endColumn":21},{"ruleId":"455","severity":2,"message":"456","line":9,"column":29,"nodeType":"452","messageId":"457","endLine":9,"endColumn":46},{"ruleId":"455","severity":2,"message":"458","line":13,"column":22,"nodeType":"452","messageId":"457","endLine":13,"endColumn":39},{"ruleId":"450","severity":1,"message":"459","line":20,"column":7,"nodeType":"452","messageId":"453","endLine":20,"endColumn":13},{"ruleId":"450","severity":1,"message":"460","line":23,"column":5,"nodeType":"452","messageId":"453","endLine":23,"endColumn":18},{"ruleId":"450","severity":1,"message":"461","line":29,"column":5,"nodeType":"452","messageId":"453","endLine":29,"endColumn":16},{"ruleId":"450","severity":1,"message":"462","line":30,"column":5,"nodeType":"452","messageId":"453","endLine":30,"endColumn":23},{"ruleId":"450","severity":1,"message":"463","line":31,"column":5,"nodeType":"452","messageId":"453","endLine":31,"endColumn":19},{"ruleId":"450","severity":1,"message":"464","line":32,"column":7,"nodeType":"452","messageId":"453","endLine":32,"endColumn":24},{"ruleId":"450","severity":1,"message":"465","line":33,"column":7,"nodeType":"452","messageId":"453","endLine":33,"endColumn":27},{"ruleId":"466","severity":2,"message":"467","line":96,"column":29,"nodeType":"468","messageId":"469","endLine":96,"endColumn":31},{"ruleId":"450","severity":1,"message":"470","line":103,"column":16,"nodeType":"452","messageId":"453","endLine":103,"endColumn":40},{"ruleId":"466","severity":2,"message":"471","line":103,"column":43,"nodeType":"468","messageId":"469","endLine":103,"endColumn":45},{"ruleId":"450","severity":1,"message":"472","line":115,"column":10,"nodeType":"452","messageId":"453","endLine":115,"endColumn":25},{"ruleId":"450","severity":1,"message":"473","line":115,"column":26,"nodeType":"452","messageId":"453","endLine":115,"endColumn":35},{"ruleId":"450","severity":1,"message":"474","line":115,"column":37,"nodeType":"452","messageId":"453","endLine":115,"endColumn":49},{"ruleId":"466","severity":2,"message":"475","line":115,"column":51,"nodeType":"468","messageId":"469","endLine":115,"endColumn":53},{"ruleId":"450","severity":1,"message":"476","line":120,"column":16,"nodeType":"452","messageId":"453","endLine":120,"endColumn":25},{"ruleId":"466","severity":2,"message":"477","line":120,"column":28,"nodeType":"468","messageId":"469","endLine":120,"endColumn":30},{"ruleId":"450","severity":1,"message":"478","line":126,"column":16,"nodeType":"452","messageId":"453","endLine":126,"endColumn":25},{"ruleId":"466","severity":2,"message":"479","line":126,"column":28,"nodeType":"468","messageId":"469","endLine":126,"endColumn":30},{"ruleId":"450","severity":1,"message":"480","line":1,"column":13,"nodeType":"452","messageId":"453","endLine":1,"endColumn":19},{"ruleId":"450","severity":1,"message":"481","line":2,"column":10,"nodeType":"452","messageId":"453","endLine":2,"endColumn":16},{"ruleId":"450","severity":1,"message":"482","line":2,"column":18,"nodeType":"452","messageId":"453","endLine":2,"endColumn":32},{"ruleId":"450","severity":1,"message":"483","line":4,"column":10,"nodeType":"452","messageId":"453","endLine":4,"endColumn":19},{"ruleId":"450","severity":1,"message":"484","line":5,"column":8,"nodeType":"452","messageId":"453","endLine":5,"endColumn":32},{"ruleId":"450","severity":1,"message":"485","line":8,"column":7,"nodeType":"452","messageId":"453","endLine":8,"endColumn":19},{"ruleId":"450","severity":1,"message":"486","line":9,"column":7,"nodeType":"452","messageId":"453","endLine":9,"endColumn":25},{"ruleId":"450","severity":1,"message":"487","line":10,"column":7,"nodeType":"452","messageId":"453","endLine":10,"endColumn":21},{"ruleId":"450","severity":1,"message":"488","line":11,"column":7,"nodeType":"452","messageId":"453","endLine":11,"endColumn":24},{"ruleId":"450","severity":1,"message":"489","line":46,"column":37,"nodeType":"452","messageId":"453","endLine":46,"endColumn":44},{"ruleId":"450","severity":1,"message":"490","line":46,"column":46,"nodeType":"452","messageId":"453","endLine":46,"endColumn":54},{"ruleId":"466","severity":2,"message":"491","line":46,"column":56,"nodeType":"468","messageId":"469","endLine":46,"endColumn":58},{"ruleId":"450","severity":1,"message":"492","line":8,"column":11,"nodeType":"452","messageId":"453","endLine":8,"endColumn":13},{"ruleId":"455","severity":2,"message":"493","line":8,"column":29,"nodeType":"452","messageId":"457","endLine":8,"endColumn":38},{"ruleId":"450","severity":1,"message":"494","line":7,"column":10,"nodeType":"452","messageId":"453","endLine":7,"endColumn":30},{"ruleId":"455","severity":2,"message":"495","line":193,"column":9,"nodeType":"452","messageId":"457","endLine":193,"endColumn":23},{"ruleId":"450","severity":1,"message":"496","line":219,"column":31,"nodeType":"452","messageId":"453","endLine":219,"endColumn":37},{"ruleId":"450","severity":1,"message":"497","line":219,"column":39,"nodeType":"452","messageId":"453","endLine":219,"endColumn":47},{"ruleId":"466","severity":2,"message":"498","line":219,"column":49,"nodeType":"499","messageId":"469","endLine":219,"endColumn":51},{"ruleId":"450","severity":1,"message":"500","line":286,"column":60,"nodeType":"452","messageId":"453","endLine":286,"endColumn":63},{"ruleId":"450","severity":1,"message":"496","line":313,"column":29,"nodeType":"452","messageId":"453","endLine":313,"endColumn":35},{"ruleId":"450","severity":1,"message":"497","line":313,"column":37,"nodeType":"452","messageId":"453","endLine":313,"endColumn":45},{"ruleId":"466","severity":2,"message":"501","line":313,"column":47,"nodeType":"499","messageId":"469","endLine":313,"endColumn":49},{"ruleId":"450","severity":1,"message":"496","line":315,"column":26,"nodeType":"452","messageId":"453","endLine":315,"endColumn":32},{"ruleId":"450","severity":1,"message":"502","line":315,"column":34,"nodeType":"452","messageId":"453","endLine":315,"endColumn":46},{"ruleId":"466","severity":2,"message":"503","line":315,"column":48,"nodeType":"499","messageId":"469","endLine":315,"endColumn":50},{"ruleId":"450","severity":1,"message":"504","line":317,"column":21,"nodeType":"452","messageId":"453","endLine":317,"endColumn":26},{"ruleId":"450","severity":1,"message":"505","line":317,"column":28,"nodeType":"452","messageId":"453","endLine":317,"endColumn":35},{"ruleId":"450","severity":1,"message":"506","line":317,"column":37,"nodeType":"452","messageId":"453","endLine":317,"endColumn":40},{"ruleId":"466","severity":2,"message":"507","line":317,"column":42,"nodeType":"499","messageId":"469","endLine":317,"endColumn":44},{"ruleId":"466","severity":2,"message":"508","line":319,"column":36,"nodeType":"499","messageId":"469","endLine":319,"endColumn":38},{"ruleId":"450","severity":1,"message":"506","line":321,"column":20,"nodeType":"452","messageId":"453","endLine":321,"endColumn":23},{"ruleId":"466","severity":2,"message":"509","line":321,"column":25,"nodeType":"499","messageId":"469","endLine":321,"endColumn":27},{"ruleId":"450","severity":1,"message":"510","line":1,"column":8,"nodeType":"452","messageId":"453","endLine":1,"endColumn":17},{"ruleId":"450","severity":1,"message":"511","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":25},{"ruleId":"466","severity":2,"message":"512","line":12,"column":39,"nodeType":"513","messageId":"469","endLine":14,"endColumn":2},{"ruleId":null,"fatal":true,"severity":2,"message":"514","line":6,"column":12},{"ruleId":"450","severity":1,"message":"515","line":5,"column":8,"nodeType":"452","messageId":"453","endLine":5,"endColumn":12},{"ruleId":"450","severity":1,"message":"516","line":8,"column":10,"nodeType":"452","messageId":"453","endLine":8,"endColumn":24},{"ruleId":"450","severity":1,"message":"517","line":9,"column":8,"nodeType":"452","messageId":"453","endLine":9,"endColumn":11},{"ruleId":"450","severity":1,"message":"518","line":10,"column":10,"nodeType":"452","messageId":"453","endLine":10,"endColumn":23},{"ruleId":"450","severity":1,"message":"519","line":11,"column":8,"nodeType":"452","messageId":"453","endLine":11,"endColumn":26},{"ruleId":"450","severity":1,"message":"520","line":12,"column":8,"nodeType":"452","messageId":"453","endLine":12,"endColumn":30},{"ruleId":"450","severity":1,"message":"521","line":13,"column":8,"nodeType":"452","messageId":"453","endLine":13,"endColumn":33},{"ruleId":"450","severity":1,"message":"522","line":14,"column":10,"nodeType":"452","messageId":"453","endLine":14,"endColumn":30},{"ruleId":"450","severity":1,"message":"523","line":15,"column":8,"nodeType":"452","messageId":"453","endLine":15,"endColumn":25},{"ruleId":"450","severity":1,"message":"524","line":16,"column":24,"nodeType":"452","messageId":"453","endLine":16,"endColumn":37},{"ruleId":"450","severity":1,"message":"525","line":16,"column":39,"nodeType":"452","messageId":"453","endLine":16,"endColumn":48},{"ruleId":"450","severity":1,"message":"526","line":17,"column":8,"nodeType":"452","messageId":"453","endLine":17,"endColumn":21},{"ruleId":"450","severity":1,"message":"527","line":18,"column":8,"nodeType":"452","messageId":"453","endLine":18,"endColumn":27},{"ruleId":"450","severity":1,"message":"528","line":19,"column":8,"nodeType":"452","messageId":"453","endLine":19,"endColumn":22},{"ruleId":"450","severity":1,"message":"529","line":20,"column":29,"nodeType":"452","messageId":"453","endLine":20,"endColumn":46},{"ruleId":"450","severity":1,"message":"530","line":21,"column":8,"nodeType":"452","messageId":"453","endLine":21,"endColumn":16},{"ruleId":"450","severity":1,"message":"531","line":22,"column":8,"nodeType":"452","messageId":"453","endLine":22,"endColumn":14},{"ruleId":"450","severity":1,"message":"532","line":23,"column":10,"nodeType":"452","messageId":"453","endLine":23,"endColumn":26},{"ruleId":"450","severity":1,"message":"533","line":25,"column":3,"nodeType":"452","messageId":"453","endLine":25,"endColumn":24},{"ruleId":"450","severity":1,"message":"534","line":28,"column":3,"nodeType":"452","messageId":"453","endLine":28,"endColumn":25},{"ruleId":"450","severity":1,"message":"535","line":29,"column":3,"nodeType":"452","messageId":"453","endLine":29,"endColumn":21},{"ruleId":"450","severity":1,"message":"536","line":30,"column":3,"nodeType":"452","messageId":"453","endLine":30,"endColumn":25},{"ruleId":"450","severity":1,"message":"537","line":31,"column":3,"nodeType":"452","messageId":"453","endLine":31,"endColumn":19},{"ruleId":"450","severity":1,"message":"538","line":32,"column":3,"nodeType":"452","messageId":"453","endLine":32,"endColumn":22},{"ruleId":"450","severity":1,"message":"539","line":33,"column":3,"nodeType":"452","messageId":"453","endLine":33,"endColumn":19},{"ruleId":"450","severity":1,"message":"540","line":34,"column":3,"nodeType":"452","messageId":"453","endLine":34,"endColumn":23},{"ruleId":"450","severity":1,"message":"541","line":35,"column":3,"nodeType":"452","messageId":"453","endLine":35,"endColumn":25},{"ruleId":"450","severity":1,"message":"542","line":36,"column":3,"nodeType":"452","messageId":"453","endLine":36,"endColumn":27},{"ruleId":"450","severity":1,"message":"543","line":37,"column":3,"nodeType":"452","messageId":"453","endLine":37,"endColumn":33},{"ruleId":"455","severity":2,"message":"544","line":60,"column":7,"nodeType":"452","messageId":"457","endLine":60,"endColumn":18},{"ruleId":"455","severity":2,"message":"545","line":79,"column":22,"nodeType":"452","messageId":"457","endLine":79,"endColumn":47},{"ruleId":"455","severity":2,"message":"546","line":108,"column":34,"nodeType":"452","messageId":"457","endLine":108,"endColumn":51},{"ruleId":"466","severity":2,"message":"547","line":306,"column":39,"nodeType":"499","messageId":"469","endLine":306,"endColumn":41},{"ruleId":"466","severity":2,"message":"548","line":311,"column":24,"nodeType":"499","messageId":"469","endLine":311,"endColumn":26},{"ruleId":"466","severity":2,"message":"549","line":318,"column":29,"nodeType":"499","messageId":"469","endLine":318,"endColumn":31},{"ruleId":"450","severity":1,"message":"550","line":331,"column":26,"nodeType":"452","messageId":"453","endLine":331,"endColumn":32},{"ruleId":"466","severity":2,"message":"551","line":331,"column":34,"nodeType":"499","messageId":"469","endLine":331,"endColumn":36},{"ruleId":"450","severity":1,"message":"552","line":361,"column":7,"nodeType":"452","messageId":"453","endLine":361,"endColumn":28},{"ruleId":"450","severity":1,"message":"553","line":362,"column":7,"nodeType":"452","messageId":"453","endLine":362,"endColumn":22},{"ruleId":"450","severity":1,"message":"554","line":363,"column":7,"nodeType":"452","messageId":"453","endLine":363,"endColumn":25},{"ruleId":"450","severity":1,"message":"555","line":364,"column":7,"nodeType":"452","messageId":"453","endLine":364,"endColumn":25},{"ruleId":"450","severity":1,"message":"556","line":365,"column":7,"nodeType":"452","messageId":"453","endLine":365,"endColumn":29},{"ruleId":"450","severity":1,"message":"557","line":366,"column":7,"nodeType":"452","messageId":"453","endLine":366,"endColumn":37},{"ruleId":"450","severity":1,"message":"558","line":367,"column":7,"nodeType":"452","messageId":"453","endLine":367,"endColumn":29},{"ruleId":"450","severity":1,"message":"559","line":368,"column":7,"nodeType":"452","messageId":"453","endLine":368,"endColumn":29},{"ruleId":"450","severity":1,"message":"560","line":369,"column":7,"nodeType":"452","messageId":"453","endLine":369,"endColumn":20},{"ruleId":"450","severity":1,"message":"561","line":370,"column":7,"nodeType":"452","messageId":"453","endLine":370,"endColumn":23},{"ruleId":"450","severity":1,"message":"562","line":371,"column":7,"nodeType":"452","messageId":"453","endLine":371,"endColumn":24},{"ruleId":"450","severity":1,"message":"563","line":372,"column":7,"nodeType":"452","messageId":"453","endLine":372,"endColumn":28},{"ruleId":"450","severity":1,"message":"564","line":373,"column":7,"nodeType":"452","messageId":"453","endLine":373,"endColumn":24},{"ruleId":"450","severity":1,"message":"565","line":374,"column":7,"nodeType":"452","messageId":"453","endLine":374,"endColumn":29},{"ruleId":"450","severity":1,"message":"566","line":375,"column":7,"nodeType":"452","messageId":"453","endLine":375,"endColumn":27},{"ruleId":"450","severity":1,"message":"567","line":376,"column":7,"nodeType":"452","messageId":"453","endLine":376,"endColumn":27},{"ruleId":"450","severity":1,"message":"568","line":377,"column":7,"nodeType":"452","messageId":"453","endLine":377,"endColumn":28},{"ruleId":"450","severity":1,"message":"569","line":378,"column":7,"nodeType":"452","messageId":"453","endLine":378,"endColumn":24},{"ruleId":"450","severity":1,"message":"570","line":379,"column":7,"nodeType":"452","messageId":"453","endLine":379,"endColumn":22},{"ruleId":"450","severity":1,"message":"571","line":380,"column":7,"nodeType":"452","messageId":"453","endLine":380,"endColumn":25},{"ruleId":"450","severity":1,"message":"572","line":381,"column":7,"nodeType":"452","messageId":"453","endLine":381,"endColumn":23},{"ruleId":"450","severity":1,"message":"573","line":382,"column":7,"nodeType":"452","messageId":"453","endLine":382,"endColumn":19},{"ruleId":"450","severity":1,"message":"574","line":404,"column":35,"nodeType":"452","messageId":"453","endLine":404,"endColumn":43},{"ruleId":"466","severity":2,"message":"575","line":404,"column":45,"nodeType":"499","messageId":"469","endLine":404,"endColumn":47},{"ruleId":"450","severity":1,"message":"574","line":411,"column":34,"nodeType":"452","messageId":"453","endLine":411,"endColumn":42},{"ruleId":"450","severity":1,"message":"576","line":411,"column":44,"nodeType":"452","messageId":"453","endLine":411,"endColumn":48},{"ruleId":"466","severity":2,"message":"577","line":411,"column":50,"nodeType":"499","messageId":"469","endLine":411,"endColumn":52},{"ruleId":"450","severity":1,"message":"578","line":418,"column":14,"nodeType":"452","messageId":"453","endLine":418,"endColumn":21},{"ruleId":"450","severity":1,"message":"579","line":418,"column":23,"nodeType":"452","messageId":"453","endLine":418,"endColumn":31},{"ruleId":"466","severity":2,"message":"580","line":418,"column":33,"nodeType":"499","messageId":"469","endLine":418,"endColumn":35},{"ruleId":"466","severity":2,"message":"581","line":425,"column":27,"nodeType":"499","messageId":"469","endLine":425,"endColumn":29},{"ruleId":"450","severity":1,"message":"574","line":435,"column":24,"nodeType":"452","messageId":"453","endLine":435,"endColumn":32},{"ruleId":"466","severity":2,"message":"582","line":435,"column":34,"nodeType":"499","messageId":"469","endLine":435,"endColumn":36},{"ruleId":"450","severity":1,"message":"574","line":442,"column":24,"nodeType":"452","messageId":"453","endLine":442,"endColumn":32},{"ruleId":"466","severity":2,"message":"583","line":442,"column":34,"nodeType":"499","messageId":"469","endLine":442,"endColumn":36},{"ruleId":"466","severity":2,"message":"584","line":455,"column":25,"nodeType":"499","messageId":"469","endLine":455,"endColumn":27},{"ruleId":"450","severity":1,"message":"585","line":460,"column":41,"nodeType":"452","messageId":"453","endLine":460,"endColumn":47},{"ruleId":"466","severity":2,"message":"586","line":460,"column":56,"nodeType":"499","messageId":"469","endLine":460,"endColumn":58},{"ruleId":"466","severity":2,"message":"587","line":462,"column":42,"nodeType":"499","messageId":"469","endLine":462,"endColumn":44},{"ruleId":"466","severity":2,"message":"588","line":464,"column":46,"nodeType":"499","messageId":"469","endLine":464,"endColumn":48},{"ruleId":"450","severity":1,"message":"589","line":471,"column":25,"nodeType":"452","messageId":"453","endLine":471,"endColumn":35},{"ruleId":"450","severity":1,"message":"590","line":471,"column":37,"nodeType":"452","messageId":"453","endLine":471,"endColumn":41},{"ruleId":"450","severity":1,"message":"591","line":471,"column":43,"nodeType":"452","messageId":"453","endLine":471,"endColumn":49},{"ruleId":"466","severity":2,"message":"592","line":471,"column":51,"nodeType":"499","messageId":"469","endLine":471,"endColumn":53},{"ruleId":"450","severity":1,"message":"589","line":478,"column":29,"nodeType":"452","messageId":"453","endLine":478,"endColumn":39},{"ruleId":"450","severity":1,"message":"591","line":478,"column":41,"nodeType":"452","messageId":"453","endLine":478,"endColumn":47},{"ruleId":"466","severity":2,"message":"593","line":478,"column":49,"nodeType":"499","messageId":"469","endLine":478,"endColumn":51},{"ruleId":"450","severity":1,"message":"589","line":485,"column":22,"nodeType":"452","messageId":"453","endLine":485,"endColumn":32},{"ruleId":"466","severity":2,"message":"594","line":485,"column":34,"nodeType":"499","messageId":"469","endLine":485,"endColumn":36},{"ruleId":"450","severity":1,"message":"595","line":492,"column":19,"nodeType":"452","messageId":"453","endLine":492,"endColumn":23},{"ruleId":"450","severity":1,"message":"596","line":492,"column":25,"nodeType":"452","messageId":"453","endLine":492,"endColumn":30},{"ruleId":"450","severity":1,"message":"597","line":492,"column":32,"nodeType":"452","messageId":"453","endLine":492,"endColumn":49},{"ruleId":"466","severity":2,"message":"598","line":492,"column":51,"nodeType":"499","messageId":"469","endLine":492,"endColumn":53},{"ruleId":"450","severity":1,"message":"596","line":500,"column":5,"nodeType":"452","messageId":"453","endLine":500,"endColumn":10},{"ruleId":"450","severity":1,"message":"589","line":501,"column":5,"nodeType":"452","messageId":"453","endLine":501,"endColumn":15},{"ruleId":"450","severity":1,"message":"591","line":502,"column":5,"nodeType":"452","messageId":"453","endLine":502,"endColumn":11},{"ruleId":"450","severity":1,"message":"597","line":503,"column":5,"nodeType":"452","messageId":"453","endLine":503,"endColumn":22},{"ruleId":"466","severity":2,"message":"599","line":504,"column":5,"nodeType":"499","messageId":"469","endLine":504,"endColumn":7},{"ruleId":"466","severity":2,"message":"600","line":511,"column":25,"nodeType":"499","messageId":"469","endLine":511,"endColumn":27},{"ruleId":"466","severity":2,"message":"601","line":522,"column":28,"nodeType":"499","messageId":"469","endLine":522,"endColumn":30},{"ruleId":"466","severity":2,"message":"602","line":531,"column":24,"nodeType":"499","messageId":"469","endLine":531,"endColumn":26},{"ruleId":"450","severity":1,"message":"550","line":541,"column":30,"nodeType":"452","messageId":"453","endLine":541,"endColumn":36},{"ruleId":"466","severity":2,"message":"603","line":541,"column":38,"nodeType":"499","messageId":"469","endLine":541,"endColumn":40},{"ruleId":"450","severity":1,"message":"604","line":553,"column":31,"nodeType":"452","messageId":"453","endLine":553,"endColumn":44},{"ruleId":"466","severity":2,"message":"605","line":553,"column":46,"nodeType":"499","messageId":"469","endLine":553,"endColumn":48},{"ruleId":"450","severity":1,"message":"578","line":561,"column":23,"nodeType":"452","messageId":"453","endLine":561,"endColumn":30},{"ruleId":"466","severity":2,"message":"606","line":561,"column":32,"nodeType":"499","messageId":"469","endLine":561,"endColumn":34},{"ruleId":"450","severity":1,"message":"607","line":572,"column":35,"nodeType":"452","messageId":"453","endLine":572,"endColumn":43},{"ruleId":"450","severity":1,"message":"608","line":572,"column":45,"nodeType":"452","messageId":"453","endLine":572,"endColumn":49},{"ruleId":"466","severity":2,"message":"609","line":572,"column":51,"nodeType":"499","messageId":"469","endLine":572,"endColumn":53},{"ruleId":"450","severity":1,"message":"610","line":586,"column":34,"nodeType":"452","messageId":"453","endLine":586,"endColumn":42},{"ruleId":"450","severity":1,"message":"611","line":586,"column":44,"nodeType":"452","messageId":"453","endLine":586,"endColumn":47},{"ruleId":"466","severity":2,"message":"612","line":586,"column":49,"nodeType":"499","messageId":"469","endLine":586,"endColumn":51},{"ruleId":"450","severity":1,"message":"613","line":599,"column":28,"nodeType":"452","messageId":"453","endLine":599,"endColumn":37},{"ruleId":"450","severity":1,"message":"611","line":599,"column":39,"nodeType":"452","messageId":"453","endLine":599,"endColumn":42},{"ruleId":"466","severity":2,"message":"614","line":599,"column":44,"nodeType":"499","messageId":"469","endLine":599,"endColumn":46},{"ruleId":"450","severity":1,"message":"613","line":607,"column":21,"nodeType":"452","messageId":"453","endLine":607,"endColumn":30},{"ruleId":"466","severity":2,"message":"615","line":607,"column":32,"nodeType":"499","messageId":"469","endLine":607,"endColumn":34},{"ruleId":"450","severity":1,"message":"616","line":614,"column":17,"nodeType":"452","messageId":"453","endLine":614,"endColumn":22},{"ruleId":"466","severity":2,"message":"617","line":614,"column":24,"nodeType":"499","messageId":"469","endLine":614,"endColumn":26},{"ruleId":"450","severity":1,"message":"613","line":629,"column":36,"nodeType":"452","messageId":"453","endLine":629,"endColumn":45},{"ruleId":"450","severity":1,"message":"611","line":629,"column":47,"nodeType":"452","messageId":"453","endLine":629,"endColumn":50},{"ruleId":"466","severity":2,"message":"618","line":629,"column":52,"nodeType":"499","messageId":"469","endLine":629,"endColumn":54},{"ruleId":"450","severity":1,"message":"613","line":638,"column":29,"nodeType":"452","messageId":"453","endLine":638,"endColumn":38},{"ruleId":"466","severity":2,"message":"619","line":638,"column":40,"nodeType":"499","messageId":"469","endLine":638,"endColumn":42},{"ruleId":"450","severity":1,"message":"616","line":644,"column":25,"nodeType":"452","messageId":"453","endLine":644,"endColumn":30},{"ruleId":"466","severity":2,"message":"620","line":644,"column":32,"nodeType":"499","messageId":"469","endLine":644,"endColumn":34},{"ruleId":"450","severity":1,"message":"613","line":655,"column":34,"nodeType":"452","messageId":"453","endLine":655,"endColumn":43},{"ruleId":"450","severity":1,"message":"611","line":655,"column":45,"nodeType":"452","messageId":"453","endLine":655,"endColumn":48},{"ruleId":"466","severity":2,"message":"621","line":655,"column":50,"nodeType":"499","messageId":"469","endLine":655,"endColumn":52},{"ruleId":"450","severity":1,"message":"613","line":663,"column":30,"nodeType":"452","messageId":"453","endLine":663,"endColumn":39},{"ruleId":"466","severity":2,"message":"622","line":663,"column":41,"nodeType":"499","messageId":"469","endLine":663,"endColumn":43},{"ruleId":"450","severity":1,"message":"613","line":672,"column":24,"nodeType":"452","messageId":"453","endLine":672,"endColumn":33},{"ruleId":"466","severity":2,"message":"623","line":672,"column":35,"nodeType":"499","messageId":"469","endLine":672,"endColumn":37},{"ruleId":"450","severity":1,"message":"616","line":678,"column":24,"nodeType":"452","messageId":"453","endLine":678,"endColumn":29},{"ruleId":"466","severity":2,"message":"624","line":678,"column":31,"nodeType":"499","messageId":"469","endLine":678,"endColumn":33},{"ruleId":"450","severity":1,"message":"613","line":689,"column":39,"nodeType":"452","messageId":"453","endLine":689,"endColumn":48},{"ruleId":"450","severity":1,"message":"611","line":689,"column":50,"nodeType":"452","messageId":"453","endLine":689,"endColumn":53},{"ruleId":"466","severity":2,"message":"625","line":689,"column":55,"nodeType":"499","messageId":"469","endLine":689,"endColumn":57},{"ruleId":"450","severity":1,"message":"613","line":698,"column":29,"nodeType":"452","messageId":"453","endLine":698,"endColumn":38},{"ruleId":"466","severity":2,"message":"626","line":698,"column":40,"nodeType":"499","messageId":"469","endLine":698,"endColumn":42},{"ruleId":"450","severity":1,"message":"616","line":704,"column":29,"nodeType":"452","messageId":"453","endLine":704,"endColumn":34},{"ruleId":"466","severity":2,"message":"627","line":704,"column":36,"nodeType":"499","messageId":"469","endLine":704,"endColumn":38},{"ruleId":"450","severity":1,"message":"613","line":714,"column":27,"nodeType":"452","messageId":"453","endLine":714,"endColumn":36},{"ruleId":"450","severity":1,"message":"611","line":714,"column":38,"nodeType":"452","messageId":"453","endLine":714,"endColumn":41},{"ruleId":"450","severity":1,"message":"628","line":714,"column":43,"nodeType":"452","messageId":"453","endLine":714,"endColumn":50},{"ruleId":"466","severity":2,"message":"629","line":714,"column":52,"nodeType":"499","messageId":"469","endLine":714,"endColumn":54},{"ruleId":"450","severity":1,"message":"613","line":723,"column":26,"nodeType":"452","messageId":"453","endLine":723,"endColumn":35},{"ruleId":"466","severity":2,"message":"630","line":723,"column":37,"nodeType":"499","messageId":"469","endLine":723,"endColumn":39},{"ruleId":"450","severity":1,"message":"616","line":729,"column":22,"nodeType":"452","messageId":"453","endLine":729,"endColumn":27},{"ruleId":"466","severity":2,"message":"631","line":729,"column":29,"nodeType":"499","messageId":"469","endLine":729,"endColumn":31},{"ruleId":"466","severity":2,"message":"632","line":734,"column":49,"nodeType":"499","messageId":"469","endLine":734,"endColumn":51},{"ruleId":"450","severity":1,"message":"633","line":752,"column":5,"nodeType":"452","messageId":"453","endLine":752,"endColumn":17},{"ruleId":"450","severity":1,"message":"634","line":753,"column":5,"nodeType":"452","messageId":"453","endLine":753,"endColumn":22},{"ruleId":"450","severity":1,"message":"635","line":754,"column":5,"nodeType":"452","messageId":"453","endLine":754,"endColumn":19},{"ruleId":"466","severity":2,"message":"636","line":755,"column":5,"nodeType":"499","messageId":"469","endLine":755,"endColumn":7},{"ruleId":"450","severity":1,"message":"633","line":769,"column":5,"nodeType":"452","messageId":"453","endLine":769,"endColumn":17},{"ruleId":"450","severity":1,"message":"634","line":770,"column":5,"nodeType":"452","messageId":"453","endLine":770,"endColumn":22},{"ruleId":"450","severity":1,"message":"635","line":771,"column":5,"nodeType":"452","messageId":"453","endLine":771,"endColumn":19},{"ruleId":"466","severity":2,"message":"637","line":772,"column":5,"nodeType":"499","messageId":"469","endLine":772,"endColumn":7},{"ruleId":"466","severity":2,"message":"638","line":782,"column":27,"nodeType":"499","messageId":"469","endLine":782,"endColumn":29},{"ruleId":"466","severity":2,"message":"639","line":788,"column":29,"nodeType":"499","messageId":"469","endLine":788,"endColumn":31},{"ruleId":"450","severity":1,"message":"640","line":806,"column":31,"nodeType":"452","messageId":"453","endLine":806,"endColumn":47},{"ruleId":"450","severity":1,"message":"641","line":806,"column":49,"nodeType":"452","messageId":"453","endLine":806,"endColumn":55},{"ruleId":"466","severity":2,"message":"642","line":806,"column":57,"nodeType":"499","messageId":"469","endLine":806,"endColumn":59},{"ruleId":"450","severity":1,"message":"640","line":817,"column":29,"nodeType":"452","messageId":"453","endLine":817,"endColumn":45},{"ruleId":"450","severity":1,"message":"641","line":817,"column":47,"nodeType":"452","messageId":"453","endLine":817,"endColumn":53},{"ruleId":"466","severity":2,"message":"643","line":817,"column":55,"nodeType":"499","messageId":"469","endLine":817,"endColumn":57},{"ruleId":"450","severity":1,"message":"640","line":828,"column":23,"nodeType":"452","messageId":"453","endLine":828,"endColumn":39},{"ruleId":"450","severity":1,"message":"644","line":828,"column":41,"nodeType":"452","messageId":"453","endLine":828,"endColumn":49},{"ruleId":"466","severity":2,"message":"645","line":828,"column":51,"nodeType":"499","messageId":"469","endLine":828,"endColumn":53},{"ruleId":"450","severity":1,"message":"646","line":834,"column":29,"nodeType":"452","messageId":"453","endLine":834,"endColumn":38},{"ruleId":"466","severity":2,"message":"647","line":834,"column":40,"nodeType":"499","messageId":"469","endLine":834,"endColumn":42},{"ruleId":"450","severity":1,"message":"646","line":842,"column":27,"nodeType":"452","messageId":"453","endLine":842,"endColumn":36},{"ruleId":"450","severity":1,"message":"641","line":842,"column":38,"nodeType":"452","messageId":"453","endLine":842,"endColumn":44},{"ruleId":"450","severity":1,"message":"648","line":842,"column":46,"nodeType":"452","messageId":"453","endLine":842,"endColumn":56},{"ruleId":"466","severity":2,"message":"649","line":842,"column":58,"nodeType":"499","messageId":"469","endLine":842,"endColumn":60},{"ruleId":"450","severity":1,"message":"550","line":853,"column":25,"nodeType":"452","messageId":"453","endLine":853,"endColumn":31},{"ruleId":"450","severity":1,"message":"650","line":853,"column":33,"nodeType":"452","messageId":"453","endLine":853,"endColumn":41},{"ruleId":"450","severity":1,"message":"651","line":853,"column":43,"nodeType":"452","messageId":"453","endLine":853,"endColumn":54},{"ruleId":"450","severity":1,"message":"652","line":853,"column":56,"nodeType":"452","messageId":"453","endLine":853,"endColumn":61},{"ruleId":"466","severity":2,"message":"653","line":853,"column":65,"nodeType":"499","messageId":"469","endLine":853,"endColumn":67},{"ruleId":"450","severity":1,"message":"646","line":866,"column":21,"nodeType":"452","messageId":"453","endLine":866,"endColumn":30},{"ruleId":"466","severity":2,"message":"654","line":866,"column":32,"nodeType":"499","messageId":"469","endLine":866,"endColumn":34},{"ruleId":"450","severity":1,"message":"550","line":878,"column":17,"nodeType":"452","messageId":"453","endLine":878,"endColumn":23},{"ruleId":"450","severity":1,"message":"655","line":878,"column":27,"nodeType":"452","messageId":"453","endLine":878,"endColumn":33},{"ruleId":"466","severity":2,"message":"656","line":878,"column":37,"nodeType":"499","messageId":"469","endLine":878,"endColumn":39},{"ruleId":"450","severity":1,"message":"550","line":887,"column":20,"nodeType":"452","messageId":"453","endLine":887,"endColumn":26},{"ruleId":"450","severity":1,"message":"657","line":887,"column":28,"nodeType":"452","messageId":"453","endLine":887,"endColumn":30},{"ruleId":"466","severity":2,"message":"658","line":887,"column":32,"nodeType":"499","messageId":"469","endLine":887,"endColumn":34},{"ruleId":"450","severity":1,"message":"550","line":901,"column":21,"nodeType":"452","messageId":"453","endLine":901,"endColumn":27},{"ruleId":"450","severity":1,"message":"659","line":901,"column":29,"nodeType":"452","messageId":"453","endLine":901,"endColumn":36},{"ruleId":"466","severity":2,"message":"660","line":901,"column":38,"nodeType":"499","messageId":"469","endLine":901,"endColumn":40},{"ruleId":"450","severity":1,"message":"659","line":916,"column":24,"nodeType":"452","messageId":"453","endLine":916,"endColumn":31},{"ruleId":"466","severity":2,"message":"661","line":916,"column":33,"nodeType":"499","messageId":"469","endLine":916,"endColumn":35},{"ruleId":"450","severity":1,"message":"662","line":926,"column":36,"nodeType":"452","messageId":"453","endLine":926,"endColumn":41},{"ruleId":"466","severity":2,"message":"663","line":926,"column":43,"nodeType":"499","messageId":"469","endLine":926,"endColumn":45},{"ruleId":"466","severity":2,"message":"664","line":933,"column":15,"nodeType":"499","messageId":"469","endLine":933,"endColumn":17},{"ruleId":"466","severity":2,"message":"665","line":939,"column":13,"nodeType":"499","messageId":"469","endLine":939,"endColumn":15},{"ruleId":"450","severity":1,"message":"666","line":947,"column":18,"nodeType":"452","messageId":"453","endLine":947,"endColumn":26},{"ruleId":"466","severity":2,"message":"667","line":947,"column":28,"nodeType":"499","messageId":"469","endLine":947,"endColumn":30},{"ruleId":"466","severity":2,"message":"668","line":953,"column":23,"nodeType":"499","messageId":"469","endLine":953,"endColumn":25},{"ruleId":"466","severity":2,"message":"669","line":958,"column":16,"nodeType":"499","messageId":"469","endLine":958,"endColumn":18},{"ruleId":"450","severity":1,"message":"578","line":969,"column":25,"nodeType":"452","messageId":"453","endLine":969,"endColumn":32},{"ruleId":"466","severity":2,"message":"670","line":969,"column":34,"nodeType":"499","messageId":"469","endLine":969,"endColumn":36},{"ruleId":"450","severity":1,"message":"578","line":976,"column":22,"nodeType":"452","messageId":"453","endLine":976,"endColumn":29},{"ruleId":"466","severity":2,"message":"671","line":976,"column":31,"nodeType":"499","messageId":"469","endLine":976,"endColumn":33},{"ruleId":"450","severity":1,"message":"672","line":994,"column":57,"nodeType":"452","messageId":"453","endLine":994,"endColumn":66},{"ruleId":"466","severity":2,"message":"673","line":994,"column":76,"nodeType":"499","messageId":"469","endLine":994,"endColumn":78},{"ruleId":"450","severity":1,"message":"674","line":1015,"column":5,"nodeType":"452","messageId":"453","endLine":1015,"endColumn":11},{"ruleId":"450","severity":1,"message":"675","line":1016,"column":5,"nodeType":"452","messageId":"453","endLine":1016,"endColumn":13},{"ruleId":"450","severity":1,"message":"497","line":1017,"column":5,"nodeType":"452","messageId":"453","endLine":1017,"endColumn":13},{"ruleId":"466","severity":2,"message":"676","line":1018,"column":5,"nodeType":"499","messageId":"469","endLine":1018,"endColumn":7},{"ruleId":"450","severity":1,"message":"674","line":1031,"column":5,"nodeType":"452","messageId":"453","endLine":1031,"endColumn":11},{"ruleId":"450","severity":1,"message":"677","line":1032,"column":5,"nodeType":"452","messageId":"453","endLine":1032,"endColumn":13},{"ruleId":"450","severity":1,"message":"678","line":1033,"column":5,"nodeType":"452","messageId":"453","endLine":1033,"endColumn":13},{"ruleId":"466","severity":2,"message":"679","line":1034,"column":5,"nodeType":"499","messageId":"469","endLine":1034,"endColumn":7},{"ruleId":"450","severity":1,"message":"680","line":1040,"column":22,"nodeType":"452","messageId":"453","endLine":1040,"endColumn":28},{"ruleId":"466","severity":2,"message":"681","line":1040,"column":30,"nodeType":"499","messageId":"469","endLine":1040,"endColumn":32},{"ruleId":"450","severity":1,"message":"682","line":1049,"column":19,"nodeType":"452","messageId":"453","endLine":1049,"endColumn":26},{"ruleId":"466","severity":2,"message":"683","line":1049,"column":28,"nodeType":"499","messageId":"469","endLine":1049,"endColumn":30},{"ruleId":"466","severity":2,"message":"684","line":1051,"column":30,"nodeType":"499","messageId":"469","endLine":1051,"endColumn":32},{"ruleId":"450","severity":1,"message":"685","line":1057,"column":38,"nodeType":"452","messageId":"453","endLine":1057,"endColumn":51},{"ruleId":"466","severity":2,"message":"686","line":1057,"column":53,"nodeType":"499","messageId":"469","endLine":1057,"endColumn":55},{"ruleId":"450","severity":1,"message":"473","line":1064,"column":23,"nodeType":"452","messageId":"453","endLine":1064,"endColumn":32},{"ruleId":"466","severity":2,"message":"687","line":1064,"column":34,"nodeType":"499","messageId":"469","endLine":1064,"endColumn":36},{"ruleId":"466","severity":2,"message":"688","line":1072,"column":26,"nodeType":"499","messageId":"469","endLine":1072,"endColumn":28},{"ruleId":"466","severity":2,"message":"689","line":1078,"column":20,"nodeType":"499","messageId":"469","endLine":1078,"endColumn":22},{"ruleId":"450","severity":1,"message":"690","line":1084,"column":27,"nodeType":"452","messageId":"453","endLine":1084,"endColumn":42},{"ruleId":"466","severity":2,"message":"691","line":1084,"column":44,"nodeType":"499","messageId":"469","endLine":1084,"endColumn":46},{"ruleId":"450","severity":1,"message":"644","line":1090,"column":26,"nodeType":"452","messageId":"453","endLine":1090,"endColumn":34},{"ruleId":"466","severity":2,"message":"692","line":1090,"column":36,"nodeType":"499","messageId":"469","endLine":1090,"endColumn":38},{"ruleId":"466","severity":2,"message":"693","line":1095,"column":15,"nodeType":"499","messageId":"469","endLine":1095,"endColumn":17},{"ruleId":"446","severity":2,"message":"447","line":6,"column":15,"nodeType":"448","messageId":"449","endLine":6,"endColumn":33},{"ruleId":"446","severity":2,"message":"447","line":7,"column":12,"nodeType":"448","messageId":"449","endLine":7,"endColumn":40},{"ruleId":"446","severity":2,"message":"447","line":6,"column":24,"nodeType":"448","messageId":"449","endLine":6,"endColumn":53},{"ruleId":"446","severity":2,"message":"447","line":7,"column":13,"nodeType":"448","messageId":"449","endLine":7,"endColumn":31},{"ruleId":"446","severity":2,"message":"447","line":8,"column":12,"nodeType":"448","messageId":"449","endLine":8,"endColumn":40},{"ruleId":"446","severity":2,"message":"447","line":9,"column":9,"nodeType":"448","messageId":"449","endLine":9,"endColumn":25},{"ruleId":"446","severity":2,"message":"447","line":10,"column":10,"nodeType":"448","messageId":"449","endLine":10,"endColumn":25},{"ruleId":"446","severity":2,"message":"447","line":1,"column":15,"nodeType":"448","messageId":"449","endLine":1,"endColumn":33},{"ruleId":"446","severity":2,"message":"447","line":2,"column":10,"nodeType":"448","messageId":"449","endLine":2,"endColumn":25},{"ruleId":"446","severity":2,"message":"447","line":3,"column":16,"nodeType":"448","messageId":"449","endLine":3,"endColumn":35},{"ruleId":"446","severity":2,"message":"447","line":4,"column":9,"nodeType":"448","messageId":"449","endLine":4,"endColumn":31},{"ruleId":"446","severity":2,"message":"447","line":5,"column":23,"nodeType":"448","messageId":"449","endLine":5,"endColumn":53},{"ruleId":"446","severity":2,"message":"447","line":6,"column":23,"nodeType":"448","messageId":"449","endLine":6,"endColumn":53},{"ruleId":"446","severity":2,"message":"447","line":7,"column":18,"nodeType":"448","messageId":"449","endLine":7,"endColumn":50},{"ruleId":"450","severity":1,"message":"694","line":120,"column":41,"nodeType":"452","messageId":"453","endLine":120,"endColumn":45},{"ruleId":"446","severity":2,"message":"447","line":1,"column":28,"nodeType":"448","messageId":"449","endLine":1,"endColumn":45},{"ruleId":"455","severity":2,"message":"695","line":21,"column":47,"nodeType":"452","messageId":"457","endLine":21,"endColumn":58},{"ruleId":"446","severity":2,"message":"447","line":62,"column":15,"nodeType":"448","messageId":"449","endLine":62,"endColumn":36},{"ruleId":"696","message":"697","line":79,"column":3,"endLine":79,"endColumn":50,"severity":2,"nodeType":null},"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-var-requires","Require statement not part of import statement.","CallExpression","noVarReqs","@typescript-eslint/no-unused-vars","'sentry' is assigned a value but never used.","Identifier","unusedVar","'firstTimeState' is assigned a value but never used.","no-undef","'rawFirstTimeState' is not defined.","undef","'ExtensionPlatform' is not defined.","'inTest' is assigned a value but never used.","'versionedData' is defined but never used.","'popupIsOpen' is assigned a value but never used.","'notificationIsOpen' is assigned a value but never used.","'uiIsTriggering' is assigned a value but never used.","'openWalletTabsIDs' is assigned a value but never used.","'requestAccountTabIds' is assigned a value but never used.","@typescript-eslint/no-empty-function","Unexpected empty async function 'initialize'.","FunctionDeclaration","unexpected","'loadStateFromPersistence' is defined but never used.","Unexpected empty async function 'loadStateFromPersistence'.","'setupController' is defined but never used.","'initState' is defined but never used.","'initLangCode' is defined but never used.","Unexpected empty function 'setupController'.","'triggerUi' is defined but never used.","Unexpected empty async function 'triggerUi'.","'openPopup' is defined but never used.","Unexpected empty async function 'openPopup'.","'Sentry' is defined but never used.","'Dedupe' is defined but never used.","'ExtraErrorData' is defined but never used.","'BuildType' is defined but never used.","'extractEthjsErrorMessage' is defined but never used.","'WALLET_DEBUG' is assigned a value but never used.","'WALLET_ENVIRONMENT' is assigned a value but never used.","'SENTRY_DSN_DEV' is assigned a value but never used.","'WALLET_BUILD_TYPE' is assigned a value but never used.","'release' is defined but never used.","'getState' is defined but never used.","Unexpected empty function 'setupSentry'.","'id' is assigned a value but never used.","'extension' is not defined.","'TRANSACTION_STATUSES' is defined but never used.","'getEnvironment' is not defined.","'txMeta' is defined but never used.","'rpcPrefs' is defined but never used.","Unexpected empty method 'showTransactionNotification'.","FunctionExpression","'tab' is defined but never used.","Unexpected empty method '_showConfirmedTransaction'.","'errorMessage' is defined but never used.","Unexpected empty method '_showFailedTransaction'.","'title' is defined but never used.","'message' is defined but never used.","'url' is defined but never used.","Unexpected empty method '_showNotification'.","Unexpected empty method '_subcribeToNotificationClicked'.","Unexpected empty method '_viewOnEtherscan'.","'extension' is defined but never used.","'ExtensionPlatform' is defined but never used.","Unexpected empty arrow function.","ArrowFunctionExpression","Parsing error: ';' expected.","'pump' is defined but never used.","'stripHexPrefix' is defined but never used.","'log' is defined but never used.","'JsonRpcEngine' is defined but never used.","'createEngineStream' is defined but never used.","'createFilterMiddleware' is defined but never used.","'createSubscriptionManager' is defined but never used.","'providerAsMiddleware' is defined but never used.","'KeyringController' is defined but never used.","'rpcErrorCodes' is defined but never used.","'ethErrors' is defined but never used.","'TrezorKeyring' is defined but never used.","'LedgerBridgeKeyring' is defined but never used.","'LatticeKeyring' is defined but never used.","'QRHardwareKeyring' is defined but never used.","'EthQuery' is defined but never used.","'nanoid' is defined but never used.","'captureException' is defined but never used.","'AddressBookController' is defined but never used.","'CurrencyRateController' is defined but never used.","'PhishingController' is defined but never used.","'NotificationController' is defined but never used.","'GasFeeController' is defined but never used.","'TokenListController' is defined but never used.","'TokensController' is defined but never used.","'TokenRatesController' is defined but never used.","'CollectiblesController' is defined but never used.","'AssetsContractController' is defined but never used.","'CollectibleDetectionController' is defined but never used.","'MILLISECOND' is not defined.","'ComposableObservableStore' is not defined.","'NetworkController' is not defined.","Unexpected empty method 'setupControllerEventSubscriptions'.","Unexpected empty method 'initializeProvider'.","Unexpected empty method 'createPublicConfigStore'.","'origin' is defined but never used.","Unexpected empty async method 'getProviderState'.","'addressBookController' is assigned a value but never used.","'alertController' is assigned a value but never used.","'approvalController' is assigned a value but never used.","'appStateController' is assigned a value but never used.","'collectiblesController' is assigned a value but never used.","'collectibleDetectionController' is assigned a value but never used.","'currencyRateController' is assigned a value but never used.","'detectTokensController' is assigned a value but never used.","'ensController' is assigned a value but never used.","'gasFeeController' is assigned a value but never used.","'keyringController' is assigned a value but never used.","'metaMetricsController' is assigned a value but never used.","'networkController' is assigned a value but never used.","'notificationController' is assigned a value but never used.","'onboardingController' is assigned a value but never used.","'permissionController' is assigned a value but never used.","'preferencesController' is assigned a value but never used.","'qrHardwareKeyring' is assigned a value but never used.","'swapsController' is assigned a value but never used.","'threeBoxController' is assigned a value but never used.","'tokensController' is assigned a value but never used.","'txController' is assigned a value but never used.","'password' is defined but never used.","Unexpected empty async method 'createNewVaultAndKeychain'.","'seed' is defined but never used.","Unexpected empty async method 'createNewVaultAndRestore'.","'address' is defined but never used.","'ethQuery' is defined but never used.","Unexpected empty method 'getBalance'.","Unexpected empty async method 'fetchInfoToSync'.","Unexpected empty async method 'submitPassword'.","Unexpected empty async method 'verifyPassword'.","Unexpected empty method 'selectFirstIdentity'.","'hdPath' is assigned a value but never used.","Unexpected empty async method 'getKeyringForDevice'.","Unexpected empty async method 'attemptLedgerTransportCreation'.","Unexpected empty async method 'establishLedgerTransportPreference'.","'deviceName' is defined but never used.","'page' is defined but never used.","'hdPath' is defined but never used.","Unexpected empty async method 'connectHardware'.","Unexpected empty async method 'checkHardwareStatus'.","Unexpected empty async method 'forgetDevice'.","'name' is defined but never used.","'index' is defined but never used.","'hdPathDescription' is defined but never used.","Unexpected empty method 'getAccountLabel'.","Unexpected empty async method 'unlockHardwareWalletAccount'.","Unexpected empty async method 'addNewAccount'.","Unexpected empty async method 'verifySeedPhrase'.","Unexpected empty async method 'resetAccount'.","Unexpected empty async method 'getPermittedAccounts'.","'targetAccount' is defined but never used.","Unexpected empty method 'removeAllAccountPermissions'.","Unexpected empty async method 'removeAccount'.","'strategy' is defined but never used.","'args' is defined but never used.","Unexpected empty async method 'importAccountWithStrategy'.","'txParams' is defined but never used.","'req' is defined but never used.","Unexpected empty async method 'newUnapprovedTransaction'.","'msgParams' is defined but never used.","Unexpected empty async method 'newUnsignedMessage'.","Unexpected empty async method 'signMessage'.","'msgId' is defined but never used.","Unexpected empty method 'cancelMessage'.","Unexpected empty async method 'newUnsignedPersonalMessage'.","Unexpected empty async method 'signPersonalMessage'.","Unexpected empty method 'cancelPersonalMessage'.","Unexpected empty async method 'newRequestDecryptMessage'.","Unexpected empty async method 'decryptMessageInline'.","Unexpected empty async method 'decryptMessage'.","Unexpected empty method 'cancelDecryptMessage'.","Unexpected empty async method 'newRequestEncryptionPublicKey'.","Unexpected empty async method 'encryptionPublicKey'.","Unexpected empty method 'cancelEncryptionPublicKey'.","'version' is defined but never used.","Unexpected empty method 'newUnsignedTypedMessage'.","Unexpected empty async method 'signTypedMessage'.","Unexpected empty method 'cancelTypedMessage'.","Unexpected empty async method 'getCurrentAccountEIP1559Compatibility'.","'originalTxId' is defined but never used.","'customGasSettings' is defined but never used.","'newTxMetaProps' is defined but never used.","Unexpected empty async method 'createCancelTransaction'.","Unexpected empty async method 'createSpeedUpTransaction'.","Unexpected empty method 'markPasswordForgotten'.","Unexpected empty method 'unMarkPasswordForgotten'.","'connectionStream' is defined but never used.","'sender' is defined but never used.","Unexpected empty method 'setupUntrustedCommunication'.","Unexpected empty method 'setupTrustedCommunication'.","'hostname' is defined but never used.","Unexpected empty method 'sendPhishingWarning'.","'outStream' is defined but never used.","Unexpected empty method 'setupControllerConnection'.","'isInternal' is defined but never used.","Unexpected empty method 'setupProviderConnection'.","'location' is defined but never used.","'subjectType' is defined but never used.","'tabId' is defined but never used.","Unexpected empty method 'setupProviderEngine'.","Unexpected empty method 'setupPublicConfig'.","'engine' is defined but never used.","Unexpected empty method 'addConnection'.","'id' is defined but never used.","Unexpected empty method 'removeConnection'.","'payload' is defined but never used.","Unexpected empty method 'notifyConnections'.","Unexpected empty method 'notifyAllConnections'.","'state' is defined but never used.","Unexpected empty async method '_onKeyringControllerUpdate'.","Unexpected empty method '_onUnlock'.","Unexpected empty method '_onLock'.","'newState' is defined but never used.","Unexpected empty method '_onStateUpdate'.","Unexpected empty method 'privateSendUpdate'.","Unexpected empty method 'isUnlocked'.","Unexpected empty async method 'getPendingNonce'.","Unexpected empty async method 'getNextNonce'.","'duplicate' is assigned a value but never used.","Unexpected empty async method 'migrateAddressBookState'.","'ticker' is assigned a value but never used.","'nickname' is defined but never used.","Unexpected empty async method 'updateAndSetCustomRpc'.","'nickname' is assigned a value but never used.","'rpcPrefs' is assigned a value but never used.","Unexpected empty async method 'setCustomRpc'.","'rpcUrl' is defined but never used.","Unexpected empty async method 'delCustomRpc'.","'rpcInfo' is defined but never used.","Unexpected empty method 'findCustomRpcBy'.","Unexpected empty async method 'initializeThreeBox'.","'transportType' is defined but never used.","Unexpected empty async method 'setLedgerTransportPreference'.","Unexpected empty method 'recordFirstTimeInfo'.","Unexpected empty setter 'isClientOpen'.","Unexpected empty method 'onClientClosed'.","'environmentType' is defined but never used.","Unexpected empty method 'onEnvironmentTypeClosed'.","Unexpected empty method 'safelistPhishingDomain'.","Unexpected empty method 'setLocked'.","'path' is defined but never used.","'Compartment' is not defined.","node/global-require","Definition for rule 'node/global-require' was not found."]